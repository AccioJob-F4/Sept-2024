{"version":3,"file":"index.js","sources":["../../../src/modules/geo/constants.ts","../../../src/modules/geo/data/listOfAllCountries.ts","../../../src/modules/geo/utils.ts","../../../src/modules/geo/getFlagOfCountry.ts","../../../src/modules/geo/getFlagsForAllCountries.ts","../../../src/modules/geo/getAllCountries.ts","../../../src/modules/geo/getStates.ts","../../../src/modules/geo/getCities.ts","../../../src/modules/geo/getZipcodes.ts"],"sourcesContent":["export const FLAG_4X3_BASE_PATH =\n  'https://unpkg.com/@razorpay/i18nify-js/lib/assets/flags';\nexport const FLAG_BASE_PATH = 'https://flagcdn.com';\n\nexport const I18NIFY_DATA_SOURCE =\n  'https://raw.githubusercontent.com/razorpay/i18nify/master/i18nify-data';\n\nexport const I18NIFY_DATA_SUPPORTED_COUNTRIES = ['IN', 'MY', 'SG', 'US'];\n","import { CountryCodeType } from '../../types';\n\nexport const LIST_OF_ALL_COUNTRIES: CountryCodeType[] = [\n  'AD',\n  'AE',\n  'AF',\n  'AG',\n  'AI',\n  'AL',\n  'AM',\n  'AO',\n  'AQ',\n  'AR',\n  'AS',\n  'AT',\n  'AU',\n  'AW',\n  'AX',\n  'AZ',\n  'BA',\n  'BB',\n  'BD',\n  'BE',\n  'BF',\n  'BG',\n  'BH',\n  'BI',\n  'BJ',\n  'BL',\n  'BM',\n  'BN',\n  'BO',\n  'BQ-BO',\n  'BQ-SA',\n  'BQ-SE',\n  'BQ',\n  'BR',\n  'BS',\n  'BT',\n  'BV',\n  'BW',\n  'BY',\n  'BZ',\n  'CA',\n  'CC',\n  'CD',\n  'CF',\n  'CG',\n  'CH',\n  'CI',\n  'CK',\n  'CL',\n  'CM',\n  'CN',\n  'CO',\n  'CR',\n  'CU',\n  'CV',\n  'CW',\n  'CX',\n  'CY',\n  'CZ',\n  'DE',\n  'DJ',\n  'DK',\n  'DM',\n  'DO',\n  'DZ',\n  'EC',\n  'EE',\n  'EG',\n  'EH',\n  'ER',\n  'ES',\n  'ET',\n  'FI',\n  'FJ',\n  'FK',\n  'FM',\n  'FO',\n  'FR',\n  'GA',\n  'GB-ENG',\n  'GB-NIR',\n  'GB-SCT',\n  'GB-UKM',\n  'GB-WLS',\n  'GB',\n  'GD',\n  'GE',\n  'GF',\n  'GG',\n  'GH',\n  'GI',\n  'GL',\n  'GM',\n  'GN',\n  'GP',\n  'GQ',\n  'GR',\n  'GS',\n  'GT',\n  'GU',\n  'GW',\n  'GY',\n  'HK',\n  'HM',\n  'HN',\n  'HR',\n  'HT',\n  'HU',\n  'ID',\n  'IE',\n  'IL',\n  'IM',\n  'IN',\n  'IO',\n  'IQ',\n  'IR',\n  'IS',\n  'IT',\n  'JE',\n  'JM',\n  'JO',\n  'JP',\n  'KE',\n  'KG',\n  'KH',\n  'KI',\n  'KM',\n  'KN',\n  'KP',\n  'KR',\n  'KW',\n  'KY',\n  'KZ',\n  'LA',\n  'LB',\n  'LC',\n  'LI',\n  'LK',\n  'LR',\n  'LS',\n  'LT',\n  'LU',\n  'LV',\n  'LY',\n  'MA',\n  'MC',\n  'MD',\n  'ME',\n  'MF',\n  'MG',\n  'MH',\n  'MK',\n  'ML',\n  'MM',\n  'MN',\n  'MO',\n  'MP',\n  'MQ',\n  'MR',\n  'MS',\n  'MT',\n  'MU',\n  'MV',\n  'MW',\n  'MX',\n  'MY',\n  'MZ',\n  'NA',\n  'NC',\n  'NE',\n  'NF',\n  'NG',\n  'NI',\n  'NL',\n  'NO',\n  'NP',\n  'NR',\n  'NU',\n  'NZ',\n  'OM',\n  'PA',\n  'PE',\n  'PF',\n  'PG',\n  'PH',\n  'PK',\n  'PL',\n  'PM',\n  'PN',\n  'PR',\n  'PS',\n  'PT',\n  'PW',\n  'PY',\n  'QA',\n  'RE',\n  'RO',\n  'RS',\n  'RU',\n  'RW',\n  'SA',\n  'SB',\n  'SC',\n  'SD',\n  'SE',\n  'SG',\n  'SH',\n  'SI',\n  'SJ',\n  'SK',\n  'SL',\n  'SM',\n  'SN',\n  'SO',\n  'SR',\n  'SS',\n  'ST',\n  'SV',\n  'SX',\n  'SY',\n  'SZ',\n  'TC',\n  'TD',\n  'TF',\n  'TG',\n  'TH',\n  'TJ',\n  'TK',\n  'TL',\n  'TM',\n  'TN',\n  'TO',\n  'TR',\n  'TT',\n  'TV',\n  'TW',\n  'TZ',\n  'UA',\n  'UG',\n  'UM',\n  'US',\n  'UY',\n  'UZ',\n  'VA',\n  'VC',\n  'VE',\n  'VG',\n  'VI',\n  'VN',\n  'VU',\n  'WF',\n  'WS',\n  'YE',\n  'YT-UNF',\n  'YT',\n  'ZA',\n  'ZM',\n  'ZW',\n];\n","import { LIST_OF_ALL_COUNTRIES } from './data/listOfAllCountries';\n\nexport function isCountryValid(_countryCode: string): boolean {\n  const countryCode = _countryCode.toUpperCase();\n  // @ts-expect-error countryCode here can be a random string\n  return LIST_OF_ALL_COUNTRIES.includes(countryCode);\n}\n","import { CountryCodeType, GetFlagReturnType } from '../types';\nimport { withErrorBoundary } from '../../common/errorBoundary';\nimport { FLAG_4X3_BASE_PATH, FLAG_BASE_PATH } from './constants';\nimport { isCountryValid } from './utils';\n\n/**\n * Retrieves the URL for the flag of a given country.\n *\n * This function checks if the provided country code is valid by verifying it against\n * a predefined list of country codes. If the country code is valid, it constructs and\n * returns a URL pointing to the flag image for that country. If the country code is not\n * found in the list, it throws an error indicating that the country code is invalid.\n *\n * @param countryCode - The country code for which to retrieve the flag URL. Must be a valid code from the list of all countries.\n * @returns The URL of the flag image for the given country code.\n * @throws {Error} If the country code is not in the list of valid country codes.\n */\nconst getFlagOfCountry = (_countryCode: CountryCodeType): GetFlagReturnType => {\n  if (!isCountryValid(_countryCode)) {\n    throw new Error(\n      `The provided country code is invalid. The received value was: ${_countryCode}. Please ensure you pass a valid country code. Check valid country codes here: https://github.com/razorpay/i18nify/blob/master/i18nify-data/country/metadata/data.json`,\n    );\n  }\n\n  const countryCode = _countryCode.toLowerCase() as CountryCodeType;\n  return {\n    original: `${FLAG_BASE_PATH}/${countryCode}.svg`,\n    '4X3': `${FLAG_4X3_BASE_PATH}/${countryCode}.svg`,\n  };\n};\n\nexport default withErrorBoundary<typeof getFlagOfCountry>(getFlagOfCountry);\n","import { withErrorBoundary } from '../../common/errorBoundary';\nimport { LIST_OF_ALL_COUNTRIES } from './data/listOfAllCountries';\nimport { FLAG_4X3_BASE_PATH, FLAG_BASE_PATH } from './constants';\nimport { GetFlagReturnType, CountryCodeType } from '../types';\n\n/**\n * Retrieves a mapping of country codes to their corresponding flag image URLs.\n *\n * This function iterates over a predefined list of country codes, constructs a URL\n * for each country's flag image based on the country code, and then returns an object\n * where each key is a country code and its value is the URL to that country's flag image.\n *\n * @returns An object mapping each country code from the list to its flag image URL.\n */\nconst getFlagsForAllCountries = (): {\n  [countryCode in CountryCodeType]: GetFlagReturnType;\n} => {\n  // Initialize an empty object to hold the country code to flag URL mapping\n  const flagsForAllCountriesMap = {} as {\n    [countryCode in CountryCodeType]: GetFlagReturnType;\n  };\n\n  // Loop through each country code in the list\n  LIST_OF_ALL_COUNTRIES.map((countryCode: CountryCodeType) => {\n    const lowerCasedCountryCode = countryCode.toLowerCase() as CountryCodeType;\n    // Construct the flag image URL and assign it to the corresponding country code in the map\n    flagsForAllCountriesMap[countryCode] = {\n      original: `${FLAG_BASE_PATH}/${lowerCasedCountryCode}.svg`,\n      '4X3': `${FLAG_4X3_BASE_PATH}/${lowerCasedCountryCode}.svg`,\n    };\n  });\n\n  // Return the populated map of country codes to flag image URLs\n  return flagsForAllCountriesMap;\n};\n\nexport default withErrorBoundary<typeof getFlagsForAllCountries>(\n  getFlagsForAllCountries,\n);\n","import { withErrorBoundary } from '../../common/errorBoundary';\nimport { CountryCodeType } from '../types';\nimport { I18NIFY_DATA_SOURCE } from './constants';\nimport { CountryMetaType } from './types';\n\n/**\n * Retrieves the meta data for all countries\n *\n * This function makes a network request to central i18nify-data source and\n * returns a promise for list of all countries with their meta data\n *\n * @returns {Promise} Promise object for all countries\n */\nconst getAllCountries = (): Promise<\n  Record<CountryCodeType, CountryMetaType>\n> => {\n  return fetch(`${I18NIFY_DATA_SOURCE}/country/metadata/data.json`)\n    .then((res) => res.json())\n    .then((res) => res.metadata_information)\n    .catch((err) => {\n      throw new Error(\n        `An error occurred while fetching country metadata. The error details are: ${err.message}.`,\n      );\n    });\n};\n\nexport default withErrorBoundary<typeof getAllCountries>(getAllCountries);\n","import { withErrorBoundary } from '../../common/errorBoundary';\nimport {\n  I18NIFY_DATA_SOURCE,\n  I18NIFY_DATA_SUPPORTED_COUNTRIES,\n} from './constants';\nimport { I18nifyCountryCodeType } from './types';\n\n/**\n * Retrieves the list of states for a country\n *\n * This function makes a network request to central i18nify-data source and\n * returns a promise for list of all states with their meta data based on country code passed\n *\n * @returns {Promise} Promise object for all states\n */\nconst getStates = (_countryCode: I18nifyCountryCodeType) => {\n  const countryCode = _countryCode.toUpperCase();\n\n  if (!I18NIFY_DATA_SUPPORTED_COUNTRIES.includes(countryCode)) {\n    return Promise.reject(\n      new Error(\n        `Invalid country code: ${countryCode}. Please ensure you provide a valid country code. Check valid country codes here: https://github.com/razorpay/i18nify/blob/master/i18nify-data/country/metadata/data.json`,\n      ),\n    );\n  }\n\n  return fetch(\n    `${I18NIFY_DATA_SOURCE}/country/subdivisions/${countryCode}.json`,\n  )\n    .then((res) => res.json())\n    .then((res) => res.states)\n    .catch((err) => {\n      throw new Error(\n        `An error occurred while fetching state data. The error details are: ${err.message}.`,\n      );\n    });\n};\n\nexport default withErrorBoundary<typeof getStates>(getStates);\n","import { withErrorBoundary } from '../../common/errorBoundary';\nimport {\n  I18NIFY_DATA_SOURCE,\n  I18NIFY_DATA_SUPPORTED_COUNTRIES,\n} from './constants';\nimport { I18nifyCountryCodeType } from './types';\n\n/**\n * Retrieves the list of all cities of a state\n *\n * This function makes a network request to central i18nify-data source and\n * returns a promise for list of all cities with their meta data based on country and state code passed\n *\n * @returns {Promise} Promise object for all cities\n */\nconst getCities = (\n  _countryCode: I18nifyCountryCodeType,\n  _stateCode?: string,\n) => {\n  const countryCode = _countryCode.toUpperCase();\n  const stateCode = _stateCode && _stateCode.toUpperCase();\n\n  if (!I18NIFY_DATA_SUPPORTED_COUNTRIES.includes(countryCode)) {\n    return Promise.reject(\n      new Error(\n        `Invalid country code: ${countryCode}. Please ensure you provide a valid country code. Check valid country codes here: https://github.com/razorpay/i18nify/blob/master/i18nify-data/country/metadata/data.json`,\n      ),\n    );\n  }\n\n  return fetch(\n    `${I18NIFY_DATA_SOURCE}/country/subdivisions/${countryCode}.json`,\n  )\n    .then((res) => res.json())\n    .then((res) => {\n      // return cities from all states if state code is not provided\n      if (!stateCode) {\n        return Object.keys(res.states).reduce((acc, curr) => {\n          acc = [...acc, ...res.states[curr].cities];\n          return acc;\n        }, [] as unknown[]);\n      }\n\n      if (!res.states[stateCode]) {\n        return Promise.reject(\n          new Error(\n            `State code ${stateCode} is missing in ${countryCode}. Please ensure you provide a valid state code that exists within the specified country.`,\n          ),\n        );\n      }\n\n      return res.states[stateCode].cities;\n    })\n    .catch((err) => {\n      throw new Error(\n        `An error occurred while fetching city data. The error details are: ${err.message}.`,\n      );\n    });\n};\n\nexport default withErrorBoundary<typeof getCities>(getCities);\n","import { withErrorBoundary } from '../../common/errorBoundary';\nimport { CountryCodeType } from '../types';\nimport {\n  I18NIFY_DATA_SOURCE,\n  I18NIFY_DATA_SUPPORTED_COUNTRIES,\n} from './constants';\nimport { CountryDetailType } from './types';\n\n/**\n * Queries the response received from i18nify-data and returns a list of zipcodes within the state provided\n * @param response i18nify-data country specific response\n * @param stateCode code assigned to the State\n * @returns array of all zipcodes present in state provided\n */\nfunction getZipcodesFromState(\n  response: CountryDetailType,\n  stateCode: string,\n): string[] {\n  const zipcodes = response.states[stateCode].cities.reduce(\n    (_acc: string[], city: { zipcodes: string[] }) => [\n      ..._acc,\n      ...city.zipcodes,\n    ],\n    [],\n  );\n  // remove duplicate zipcodes\n  return [...new Set(zipcodes)];\n}\n\n/**\n * Retrieves the list of all cities of a state\n *\n * This function makes a network request to central i18nify-data source and\n * returns a promise for list of all cities with their meta data based on country and state code passed\n *\n * @returns {Promise} Promise object for all cities\n */\nconst getZipcodes = (_countryCode: CountryCodeType, _stateCode?: string) => {\n  const countryCode = _countryCode.toUpperCase();\n  const stateCode = _stateCode && _stateCode.toUpperCase();\n\n  if (!I18NIFY_DATA_SUPPORTED_COUNTRIES.includes(countryCode)) {\n    return Promise.reject(\n      new Error(\n        `Invalid country code: ${countryCode}. Please ensure you provide a valid country code.`,\n      ),\n    );\n  }\n\n  return fetch(\n    `${I18NIFY_DATA_SOURCE}/country/subdivisions/${countryCode}.json`,\n  )\n    .then((res) => res.json())\n    .then((res) => {\n      // return zipcodes of all states if state code is not provided\n      if (!stateCode) {\n        return Object.keys(res.states).reduce((acc, state) => {\n          const stateZipcodes = getZipcodesFromState(res, state);\n\n          return [...acc, ...stateZipcodes];\n        }, [] as unknown[]);\n      }\n\n      if (!res.states[stateCode]) {\n        return Promise.reject(\n          `State code ${stateCode} is missing in ${countryCode}. Please ensure you provide a valid state code that exists within the specified country. Check valid state codes and country codes here: https://github.com/razorpay/i18nify/blob/master/i18nify-data/country/metadata/data.json`,\n        );\n      }\n\n      return getZipcodesFromState(res, stateCode);\n    })\n    .catch((err) => {\n      throw new Error(\n        `An error occurred while fetching zipcode data. The error details are: ${err}.`,\n      );\n    });\n};\n\nexport default withErrorBoundary<typeof getZipcodes>(getZipcodes);\n"],"names":[],"mappings":"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"}