import { w as withErrorBoundary } from '../index-hH4j_WbX.js';

const FLAG_4X3_BASE_PATH = 'https://unpkg.com/@razorpay/i18nify-js/lib/assets/flags';
const FLAG_BASE_PATH = 'https://flagcdn.com';
const I18NIFY_DATA_SOURCE = 'https://raw.githubusercontent.com/razorpay/i18nify/master/i18nify-data';
const I18NIFY_DATA_SUPPORTED_COUNTRIES = ['IN', 'MY', 'SG', 'US'];

const LIST_OF_ALL_COUNTRIES = [
    'AD',
    'AE',
    'AF',
    'AG',
    'AI',
    'AL',
    'AM',
    'AO',
    'AQ',
    'AR',
    'AS',
    'AT',
    'AU',
    'AW',
    'AX',
    'AZ',
    'BA',
    'BB',
    'BD',
    'BE',
    'BF',
    'BG',
    'BH',
    'BI',
    'BJ',
    'BL',
    'BM',
    'BN',
    'BO',
    'BQ-BO',
    'BQ-SA',
    'BQ-SE',
    'BQ',
    'BR',
    'BS',
    'BT',
    'BV',
    'BW',
    'BY',
    'BZ',
    'CA',
    'CC',
    'CD',
    'CF',
    'CG',
    'CH',
    'CI',
    'CK',
    'CL',
    'CM',
    'CN',
    'CO',
    'CR',
    'CU',
    'CV',
    'CW',
    'CX',
    'CY',
    'CZ',
    'DE',
    'DJ',
    'DK',
    'DM',
    'DO',
    'DZ',
    'EC',
    'EE',
    'EG',
    'EH',
    'ER',
    'ES',
    'ET',
    'FI',
    'FJ',
    'FK',
    'FM',
    'FO',
    'FR',
    'GA',
    'GB-ENG',
    'GB-NIR',
    'GB-SCT',
    'GB-UKM',
    'GB-WLS',
    'GB',
    'GD',
    'GE',
    'GF',
    'GG',
    'GH',
    'GI',
    'GL',
    'GM',
    'GN',
    'GP',
    'GQ',
    'GR',
    'GS',
    'GT',
    'GU',
    'GW',
    'GY',
    'HK',
    'HM',
    'HN',
    'HR',
    'HT',
    'HU',
    'ID',
    'IE',
    'IL',
    'IM',
    'IN',
    'IO',
    'IQ',
    'IR',
    'IS',
    'IT',
    'JE',
    'JM',
    'JO',
    'JP',
    'KE',
    'KG',
    'KH',
    'KI',
    'KM',
    'KN',
    'KP',
    'KR',
    'KW',
    'KY',
    'KZ',
    'LA',
    'LB',
    'LC',
    'LI',
    'LK',
    'LR',
    'LS',
    'LT',
    'LU',
    'LV',
    'LY',
    'MA',
    'MC',
    'MD',
    'ME',
    'MF',
    'MG',
    'MH',
    'MK',
    'ML',
    'MM',
    'MN',
    'MO',
    'MP',
    'MQ',
    'MR',
    'MS',
    'MT',
    'MU',
    'MV',
    'MW',
    'MX',
    'MY',
    'MZ',
    'NA',
    'NC',
    'NE',
    'NF',
    'NG',
    'NI',
    'NL',
    'NO',
    'NP',
    'NR',
    'NU',
    'NZ',
    'OM',
    'PA',
    'PE',
    'PF',
    'PG',
    'PH',
    'PK',
    'PL',
    'PM',
    'PN',
    'PR',
    'PS',
    'PT',
    'PW',
    'PY',
    'QA',
    'RE',
    'RO',
    'RS',
    'RU',
    'RW',
    'SA',
    'SB',
    'SC',
    'SD',
    'SE',
    'SG',
    'SH',
    'SI',
    'SJ',
    'SK',
    'SL',
    'SM',
    'SN',
    'SO',
    'SR',
    'SS',
    'ST',
    'SV',
    'SX',
    'SY',
    'SZ',
    'TC',
    'TD',
    'TF',
    'TG',
    'TH',
    'TJ',
    'TK',
    'TL',
    'TM',
    'TN',
    'TO',
    'TR',
    'TT',
    'TV',
    'TW',
    'TZ',
    'UA',
    'UG',
    'UM',
    'US',
    'UY',
    'UZ',
    'VA',
    'VC',
    'VE',
    'VG',
    'VI',
    'VN',
    'VU',
    'WF',
    'WS',
    'YE',
    'YT-UNF',
    'YT',
    'ZA',
    'ZM',
    'ZW',
];

function isCountryValid(_countryCode) {
    const countryCode = _countryCode.toUpperCase();
    // @ts-expect-error countryCode here can be a random string
    return LIST_OF_ALL_COUNTRIES.includes(countryCode);
}

/**
 * Retrieves the URL for the flag of a given country.
 *
 * This function checks if the provided country code is valid by verifying it against
 * a predefined list of country codes. If the country code is valid, it constructs and
 * returns a URL pointing to the flag image for that country. If the country code is not
 * found in the list, it throws an error indicating that the country code is invalid.
 *
 * @param countryCode - The country code for which to retrieve the flag URL. Must be a valid code from the list of all countries.
 * @returns The URL of the flag image for the given country code.
 * @throws {Error} If the country code is not in the list of valid country codes.
 */
const getFlagOfCountry = (_countryCode) => {
    if (!isCountryValid(_countryCode)) {
        throw new Error(`The provided country code is invalid. The received value was: ${_countryCode}. Please ensure you pass a valid country code. Check valid country codes here: https://github.com/razorpay/i18nify/blob/master/i18nify-data/country/metadata/data.json`);
    }
    const countryCode = _countryCode.toLowerCase();
    return {
        original: `${FLAG_BASE_PATH}/${countryCode}.svg`,
        '4X3': `${FLAG_4X3_BASE_PATH}/${countryCode}.svg`,
    };
};
var getFlagOfCountry$1 = withErrorBoundary(getFlagOfCountry);

/**
 * Retrieves a mapping of country codes to their corresponding flag image URLs.
 *
 * This function iterates over a predefined list of country codes, constructs a URL
 * for each country's flag image based on the country code, and then returns an object
 * where each key is a country code and its value is the URL to that country's flag image.
 *
 * @returns An object mapping each country code from the list to its flag image URL.
 */
const getFlagsForAllCountries = () => {
    // Initialize an empty object to hold the country code to flag URL mapping
    const flagsForAllCountriesMap = {};
    // Loop through each country code in the list
    LIST_OF_ALL_COUNTRIES.map((countryCode) => {
        const lowerCasedCountryCode = countryCode.toLowerCase();
        // Construct the flag image URL and assign it to the corresponding country code in the map
        flagsForAllCountriesMap[countryCode] = {
            original: `${FLAG_BASE_PATH}/${lowerCasedCountryCode}.svg`,
            '4X3': `${FLAG_4X3_BASE_PATH}/${lowerCasedCountryCode}.svg`,
        };
    });
    // Return the populated map of country codes to flag image URLs
    return flagsForAllCountriesMap;
};
var getFlagsForAllCountries$1 = withErrorBoundary(getFlagsForAllCountries);

/**
 * Retrieves the meta data for all countries
 *
 * This function makes a network request to central i18nify-data source and
 * returns a promise for list of all countries with their meta data
 *
 * @returns {Promise} Promise object for all countries
 */
const getAllCountries = () => {
    return fetch(`${I18NIFY_DATA_SOURCE}/country/metadata/data.json`)
        .then((res) => res.json())
        .then((res) => res.metadata_information)
        .catch((err) => {
        throw new Error(`An error occurred while fetching country metadata. The error details are: ${err.message}.`);
    });
};
var getAllCountries$1 = withErrorBoundary(getAllCountries);

/**
 * Retrieves the list of states for a country
 *
 * This function makes a network request to central i18nify-data source and
 * returns a promise for list of all states with their meta data based on country code passed
 *
 * @returns {Promise} Promise object for all states
 */
const getStates = (_countryCode) => {
    const countryCode = _countryCode.toUpperCase();
    if (!I18NIFY_DATA_SUPPORTED_COUNTRIES.includes(countryCode)) {
        return Promise.reject(new Error(`Invalid country code: ${countryCode}. Please ensure you provide a valid country code. Check valid country codes here: https://github.com/razorpay/i18nify/blob/master/i18nify-data/country/metadata/data.json`));
    }
    return fetch(`${I18NIFY_DATA_SOURCE}/country/subdivisions/${countryCode}.json`)
        .then((res) => res.json())
        .then((res) => res.states)
        .catch((err) => {
        throw new Error(`An error occurred while fetching state data. The error details are: ${err.message}.`);
    });
};
var getStates$1 = withErrorBoundary(getStates);

/**
 * Retrieves the list of all cities of a state
 *
 * This function makes a network request to central i18nify-data source and
 * returns a promise for list of all cities with their meta data based on country and state code passed
 *
 * @returns {Promise} Promise object for all cities
 */
const getCities = (_countryCode, _stateCode) => {
    const countryCode = _countryCode.toUpperCase();
    const stateCode = _stateCode && _stateCode.toUpperCase();
    if (!I18NIFY_DATA_SUPPORTED_COUNTRIES.includes(countryCode)) {
        return Promise.reject(new Error(`Invalid country code: ${countryCode}. Please ensure you provide a valid country code. Check valid country codes here: https://github.com/razorpay/i18nify/blob/master/i18nify-data/country/metadata/data.json`));
    }
    return fetch(`${I18NIFY_DATA_SOURCE}/country/subdivisions/${countryCode}.json`)
        .then((res) => res.json())
        .then((res) => {
        // return cities from all states if state code is not provided
        if (!stateCode) {
            return Object.keys(res.states).reduce((acc, curr) => {
                acc = [...acc, ...res.states[curr].cities];
                return acc;
            }, []);
        }
        if (!res.states[stateCode]) {
            return Promise.reject(new Error(`State code ${stateCode} is missing in ${countryCode}. Please ensure you provide a valid state code that exists within the specified country.`));
        }
        return res.states[stateCode].cities;
    })
        .catch((err) => {
        throw new Error(`An error occurred while fetching city data. The error details are: ${err.message}.`);
    });
};
var getCities$1 = withErrorBoundary(getCities);

/**
 * Queries the response received from i18nify-data and returns a list of zipcodes within the state provided
 * @param response i18nify-data country specific response
 * @param stateCode code assigned to the State
 * @returns array of all zipcodes present in state provided
 */
function getZipcodesFromState(response, stateCode) {
    const zipcodes = response.states[stateCode].cities.reduce((_acc, city) => [
        ..._acc,
        ...city.zipcodes,
    ], []);
    // remove duplicate zipcodes
    return [...new Set(zipcodes)];
}
/**
 * Retrieves the list of all cities of a state
 *
 * This function makes a network request to central i18nify-data source and
 * returns a promise for list of all cities with their meta data based on country and state code passed
 *
 * @returns {Promise} Promise object for all cities
 */
const getZipcodes = (_countryCode, _stateCode) => {
    const countryCode = _countryCode.toUpperCase();
    const stateCode = _stateCode && _stateCode.toUpperCase();
    if (!I18NIFY_DATA_SUPPORTED_COUNTRIES.includes(countryCode)) {
        return Promise.reject(new Error(`Invalid country code: ${countryCode}. Please ensure you provide a valid country code.`));
    }
    return fetch(`${I18NIFY_DATA_SOURCE}/country/subdivisions/${countryCode}.json`)
        .then((res) => res.json())
        .then((res) => {
        // return zipcodes of all states if state code is not provided
        if (!stateCode) {
            return Object.keys(res.states).reduce((acc, state) => {
                const stateZipcodes = getZipcodesFromState(res, state);
                return [...acc, ...stateZipcodes];
            }, []);
        }
        if (!res.states[stateCode]) {
            return Promise.reject(`State code ${stateCode} is missing in ${countryCode}. Please ensure you provide a valid state code that exists within the specified country. Check valid state codes and country codes here: https://github.com/razorpay/i18nify/blob/master/i18nify-data/country/metadata/data.json`);
        }
        return getZipcodesFromState(res, stateCode);
    })
        .catch((err) => {
        throw new Error(`An error occurred while fetching zipcode data. The error details are: ${err}.`);
    });
};
var getZipcodes$1 = withErrorBoundary(getZipcodes);

export { getAllCountries$1 as getAllCountries, getCities$1 as getCities, getFlagOfCountry$1 as getFlagOfCountry, getFlagsForAllCountries$1 as getFlagsForAllCountries, getStates$1 as getStates, getZipcodes$1 as getZipcodes };
//# sourceMappingURL=index.js.map
