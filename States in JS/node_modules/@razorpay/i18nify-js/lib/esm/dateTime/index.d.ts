export { Calendar, CalendarDate, CalendarDateTime, Time, ZonedDateTime } from '@internationalized/date';

declare const ALLOWED_FORMAT_PARTS_KEYS: readonly ["day", "dayPeriod", "era", "fractionalSecond", "hour", "minute", "month", "relatedYear", "second", "timeZone", "weekday", "year", "yearName"];

type DateInput = Date | string | number;
type FormattedPartsObject = {
    [key in (typeof ALLOWED_FORMAT_PARTS_KEYS)[number]]?: string | undefined;
};
interface ParsedDateTime extends FormattedPartsObject {
    rawParts: Array<{
        type: string;
        value: unknown;
    }>;
    formattedDate: string;
    date: Date | null;
}

declare const _default$3: (date: DateInput, options?: {
    locale?: string | undefined;
    dateTimeMode?: string | null | undefined;
    intlOptions?: Intl.DateTimeFormatOptions | undefined;
} | undefined) => string;

declare const _default$2: (date: DateInput, options?: {
    locale?: string | undefined;
    baseDate?: DateInput | undefined;
    intlOptions?: Intl.RelativeTimeFormatOptions | undefined;
} | undefined) => string;

declare const _default$1: (options: {
    locale?: string | undefined;
    weekday?: "short" | "long" | "narrow" | undefined;
}) => string[];

declare const _default: (date: DateInput, options?: {
    locale?: string | undefined;
    intlOptions?: Intl.DateTimeFormatOptions | undefined;
} | undefined) => ParsedDateTime;

export { _default$3 as formatDateTime, _default$2 as getRelativeTime, _default$1 as getWeekdays, _default as parseDateTime };
