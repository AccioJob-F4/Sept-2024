import { w as withErrorBoundary } from '../index-hH4j_WbX.js';
import { g as getLocale } from '../getLocale-ais0bWmO.js';
import '../index-fuw8iepm.js';

const getIntlInstanceWithOptions = (options = {}) => {
    const locale = getLocale(options);
    const intlOptions = (options === null || options === void 0 ? void 0 : options.intlOptions) ? Object.assign({}, options.intlOptions) : {};
    if ((options === null || options === void 0 ? void 0 : options.currency) || intlOptions.currency) {
        intlOptions.style = 'currency';
        intlOptions.currency = (options.currency || intlOptions.currency);
    }
    if (!locale)
        throw new Error(`The provided locale value is invalid. The received value was: ${locale}. Please ensure you pass a correct locale string for proper formatting.`);
    return new Intl.NumberFormat(locale || undefined, intlOptions);
};

var AFN = {
	name: "Afghani",
	minor_unit: "2",
	symbol: "؋"
};
var EUR = {
	name: "Euro",
	minor_unit: "2",
	symbol: "€"
};
var ALL = {
	name: "Lek",
	minor_unit: "2",
	symbol: "L"
};
var DZD = {
	name: "Algerian Dinar",
	minor_unit: "2",
	symbol: "د.ج"
};
var USD = {
	name: "US Dollar",
	minor_unit: "2",
	symbol: "$"
};
var AOA = {
	name: "Kwanza",
	minor_unit: "2",
	symbol: "Kz"
};
var XCD = {
	name: "East Caribbean Dollar",
	minor_unit: "2",
	symbol: "EC$"
};
var ARS = {
	name: "Argentine Peso",
	minor_unit: "2",
	symbol: "ARS"
};
var AMD = {
	name: "Armenian Dram",
	minor_unit: "2",
	symbol: "֏"
};
var AWG = {
	name: "Aruban Florin",
	minor_unit: "2",
	symbol: "Aƒ"
};
var AUD = {
	name: "Australian Dollar",
	minor_unit: "2",
	symbol: "A$"
};
var AZN = {
	name: "Azerbaijan Manat",
	minor_unit: "2",
	symbol: "₼"
};
var BSD = {
	name: "Bahamian Dollar",
	minor_unit: "2",
	symbol: "BSD"
};
var BHD = {
	name: "Bahraini Dinar",
	minor_unit: "3",
	symbol: ".د.ب"
};
var BDT = {
	name: "Taka",
	minor_unit: "2",
	symbol: "৳"
};
var BBD = {
	name: "Barbados Dollar",
	minor_unit: "2",
	symbol: "Bds$"
};
var BYN = {
	name: "Belarusian Ruble",
	minor_unit: "2",
	symbol: "Rbl"
};
var BZD = {
	name: "Belize Dollar",
	minor_unit: "2",
	symbol: "BZ$"
};
var XOF = {
	name: "CFA Franc BCEAO",
	minor_unit: "0",
	symbol: "CFA"
};
var BMD = {
	name: "Bermudian Dollar",
	minor_unit: "2",
	symbol: "BD$"
};
var INR = {
	name: "Indian Rupee",
	minor_unit: "2",
	symbol: "₹"
};
var BTN = {
	name: "Ngultrum",
	minor_unit: "2",
	symbol: "Nu."
};
var BOB = {
	name: "Boliviano",
	minor_unit: "2",
	symbol: "Bs."
};
var BOV = {
	name: "Mvdol",
	minor_unit: "2",
	symbol: "Bs"
};
var BAM = {
	name: "Convertible Mark",
	minor_unit: "2",
	symbol: "KM"
};
var BWP = {
	name: "Pula",
	minor_unit: "2",
	symbol: "P"
};
var NOK = {
	name: "Norwegian Krone",
	minor_unit: "2",
	symbol: "kr"
};
var BRL = {
	name: "Brazilian Real",
	minor_unit: "2",
	symbol: "R$"
};
var BND = {
	name: "Brunei Dollar",
	minor_unit: "2",
	symbol: "B$"
};
var BGN = {
	name: "Bulgarian Lev",
	minor_unit: "2",
	symbol: "лв."
};
var BIF = {
	name: "Burundi Franc",
	minor_unit: "0",
	symbol: "FBu"
};
var CVE = {
	name: "Cabo Verde Escudo",
	minor_unit: "2",
	symbol: "CVE"
};
var KHR = {
	name: "Riel",
	minor_unit: "2",
	symbol: "៛"
};
var XAF = {
	name: "CFA Franc BEAC",
	minor_unit: "0",
	symbol: "FCFA"
};
var CAD = {
	name: "Canadian Dollar",
	minor_unit: "2",
	symbol: "CA$"
};
var KYD = {
	name: "Cayman Islands Dollar",
	minor_unit: "2",
	symbol: "CI$"
};
var CLP = {
	name: "Chilean Peso",
	minor_unit: "0",
	symbol: "CLP"
};
var CLF = {
	name: "Unidad de Fomento",
	minor_unit: "4",
	symbol: "UF"
};
var CNY = {
	name: "Yuan Renminbi",
	minor_unit: "2",
	symbol: "CN¥"
};
var COP = {
	name: "Colombian Peso",
	minor_unit: "2",
	symbol: "COL$"
};
var COU = {
	name: "Unidad de Valor Real",
	minor_unit: "2",
	symbol: "UVR"
};
var KMF = {
	name: "Comorian Franc",
	minor_unit: "0",
	symbol: "CF"
};
var CDF = {
	name: "Congolese Franc",
	minor_unit: "2",
	symbol: "FC"
};
var NZD = {
	name: "New Zealand Dollar",
	minor_unit: "2",
	symbol: "NZ$"
};
var CRC = {
	name: "Costa Rican Colon",
	minor_unit: "2",
	symbol: "₡"
};
var HRK = {
	name: "Kuna",
	minor_unit: "2",
	symbol: "kn"
};
var CUP = {
	name: "Cuban Peso",
	minor_unit: "2",
	symbol: "$MN"
};
var CUC = {
	name: "Peso Convertible",
	minor_unit: "2",
	symbol: "CUC$"
};
var ANG = {
	name: "Netherlands Antillean Guilder",
	minor_unit: "2",
	symbol: "ƒ"
};
var CZK = {
	name: "Czech Koruna",
	minor_unit: "2",
	symbol: "Kč"
};
var DKK = {
	name: "Danish Krone",
	minor_unit: "2",
	symbol: "kr"
};
var DJF = {
	name: "Djibouti Franc",
	minor_unit: "0",
	symbol: "Fdj"
};
var DOP = {
	name: "Dominican Peso",
	minor_unit: "2",
	symbol: "RD$"
};
var EGP = {
	name: "Egyptian Pound",
	minor_unit: "2",
	symbol: "E£"
};
var SVC = {
	name: "El Salvador Colon",
	minor_unit: "2",
	symbol: "₡"
};
var ERN = {
	name: "Nakfa",
	minor_unit: "2",
	symbol: "Nfk"
};
var SZL = {
	name: "Lilangeni",
	minor_unit: "2",
	symbol: "E"
};
var ETB = {
	name: "Ethiopian Birr",
	minor_unit: "2",
	symbol: "Br"
};
var FKP = {
	name: "Falkland Islands Pound",
	minor_unit: "2",
	symbol: "FK£"
};
var FJD = {
	name: "Fiji Dollar",
	minor_unit: "2",
	symbol: "FJ$"
};
var XPF = {
	name: "CFP Franc",
	minor_unit: "0",
	symbol: "F"
};
var GMD = {
	name: "Dalasi",
	minor_unit: "2",
	symbol: "D"
};
var GEL = {
	name: "Lari",
	minor_unit: "2",
	symbol: "₾"
};
var GHS = {
	name: "Ghana Cedi",
	minor_unit: "2",
	symbol: "GH₵"
};
var GIP = {
	name: "Gibraltar Pound",
	minor_unit: "2",
	symbol: "£"
};
var GTQ = {
	name: "Quetzal",
	minor_unit: "2",
	symbol: "Q"
};
var GBP = {
	name: "Pound Sterling",
	minor_unit: "2",
	symbol: "£"
};
var GNF = {
	name: "Guinean Franc",
	minor_unit: "0",
	symbol: "FG"
};
var GYD = {
	name: "Guyana Dollar",
	minor_unit: "2",
	symbol: "GY$"
};
var HTG = {
	name: "Gourde",
	minor_unit: "2",
	symbol: "G"
};
var HNL = {
	name: "Lempira",
	minor_unit: "2",
	symbol: "L"
};
var HKD = {
	name: "Hong Kong Dollar",
	minor_unit: "2",
	symbol: "HK$"
};
var HUF = {
	name: "Forint",
	minor_unit: "2",
	symbol: "Ft"
};
var ISK = {
	name: "Iceland Krona",
	minor_unit: "0",
	symbol: "kr"
};
var IDR = {
	name: "Rupiah",
	minor_unit: "2",
	symbol: "Rp"
};
var IRR = {
	name: "Iranian Rial",
	minor_unit: "2",
	symbol: "﷼"
};
var IQD = {
	name: "Iraqi Dinar",
	minor_unit: "3",
	symbol: "ع.د"
};
var ILS = {
	name: "New Israeli Sheqel",
	minor_unit: "2",
	symbol: "₪"
};
var JMD = {
	name: "Jamaican Dollar",
	minor_unit: "2",
	symbol: "J$"
};
var JPY = {
	name: "Yen",
	minor_unit: "0",
	symbol: "¥"
};
var JOD = {
	name: "Jordanian Dinar",
	minor_unit: "3",
	symbol: "JD"
};
var KZT = {
	name: "Tenge",
	minor_unit: "2",
	symbol: "₸"
};
var KES = {
	name: "Kenyan Shilling",
	minor_unit: "2",
	symbol: "KSh"
};
var KPW = {
	name: "North Korean Won",
	minor_unit: "2",
	symbol: "₩"
};
var KRW = {
	name: "Won",
	minor_unit: "0",
	symbol: "₩"
};
var KWD = {
	name: "Kuwaiti Dinar",
	minor_unit: "3",
	symbol: "د.ك"
};
var KGS = {
	name: "Som",
	minor_unit: "2",
	symbol: "сом"
};
var LAK = {
	name: "Kip",
	minor_unit: "2",
	symbol: "₭"
};
var LBP = {
	name: "Lebanese Pound",
	minor_unit: "2",
	symbol: "L£"
};
var LSL = {
	name: "Loti",
	minor_unit: "2",
	symbol: "M"
};
var ZAR = {
	name: "South African Rand",
	minor_unit: "2",
	symbol: "R"
};
var LRD = {
	name: "Liberian Dollar",
	minor_unit: "2",
	symbol: "L$"
};
var LYD = {
	name: "Libyan Dinar",
	minor_unit: "3",
	symbol: "LD"
};
var CHF = {
	name: "Swiss Franc",
	minor_unit: "2",
	symbol: "CHF"
};
var MOP = {
	name: "Pataca",
	minor_unit: "2",
	symbol: "MOP$"
};
var MKD = {
	name: "Denar",
	minor_unit: "2",
	symbol: "ден"
};
var MGA = {
	name: "Malagasy Ariary",
	minor_unit: "2",
	symbol: "Ar"
};
var MWK = {
	name: "Malawi Kwacha",
	minor_unit: "2",
	symbol: "MK"
};
var MYR = {
	name: "Malaysian Ringgit",
	minor_unit: "2",
	symbol: "RM"
};
var MVR = {
	name: "Rufiyaa",
	minor_unit: "2",
	symbol: "Rf"
};
var MRU = {
	name: "Ouguiya",
	minor_unit: "2",
	symbol: "UM"
};
var MUR = {
	name: "Mauritian Rupee",
	minor_unit: "2",
	symbol: "₨"
};
var MXN = {
	name: "Mexican Peso",
	minor_unit: "2",
	symbol: "Mex$"
};
var MXV = {
	name: "Mexican Unidad de Inversion (UDI)",
	minor_unit: "2",
	symbol: "UDI"
};
var MDL = {
	name: "Moldovan Leu",
	minor_unit: "2",
	symbol: "L"
};
var MNT = {
	name: "Tugrik",
	minor_unit: "2",
	symbol: "₮"
};
var MAD = {
	name: "Moroccan Dirham",
	minor_unit: "2",
	symbol: "DH"
};
var MZN = {
	name: "Mozambique Metical",
	minor_unit: "2",
	symbol: "MT"
};
var MMK = {
	name: "Kyat",
	minor_unit: "2",
	symbol: "Ks"
};
var NAD = {
	name: "Namibia Dollar",
	minor_unit: "2",
	symbol: "N$"
};
var NPR = {
	name: "Nepalese Rupee",
	minor_unit: "2",
	symbol: "₨"
};
var NIO = {
	name: "Cordoba Oro",
	minor_unit: "2",
	symbol: "C$"
};
var NGN = {
	name: "Naira",
	minor_unit: "2",
	symbol: "₦"
};
var OMR = {
	name: "Rial Omani",
	minor_unit: "3",
	symbol: "ر.ع."
};
var PKR = {
	name: "Pakistan Rupee",
	minor_unit: "2",
	symbol: "₨"
};
var PAB = {
	name: "Balboa",
	minor_unit: "2",
	symbol: "B/."
};
var PGK = {
	name: "Kina",
	minor_unit: "2",
	symbol: "K"
};
var PYG = {
	name: "Guarani",
	minor_unit: "0",
	symbol: "₲"
};
var PEN = {
	name: "Sol",
	minor_unit: "2",
	symbol: "S/"
};
var PHP = {
	name: "Philippine Peso",
	minor_unit: "2",
	symbol: "₱"
};
var PLN = {
	name: "Zloty",
	minor_unit: "2",
	symbol: "zł"
};
var QAR = {
	name: "Qatari Rial",
	minor_unit: "2",
	symbol: "ر.ق"
};
var RON = {
	name: "Romanian Leu",
	minor_unit: "2",
	symbol: "lei"
};
var RUB = {
	name: "Russian Ruble",
	minor_unit: "2",
	symbol: "₽"
};
var RWF = {
	name: "Rwandan Franc",
	minor_unit: "0",
	symbol: "FRw"
};
var SHP = {
	name: "Saint Helena Pound",
	minor_unit: "2",
	symbol: "£"
};
var WST = {
	name: "Tala",
	minor_unit: "2",
	symbol: "WS$"
};
var STN = {
	name: "Dobra",
	minor_unit: "2",
	symbol: "Db"
};
var SAR = {
	name: "Saudi Riyal",
	minor_unit: "2",
	symbol: "ر.س"
};
var RSD = {
	name: "Serbian Dinar",
	minor_unit: "2",
	symbol: "дин."
};
var SCR = {
	name: "Seychelles Rupee",
	minor_unit: "2",
	symbol: "₨"
};
var SLL = {
	name: "Leone",
	minor_unit: "2",
	symbol: "Le"
};
var SGD = {
	name: "Singapore Dollar",
	minor_unit: "2",
	symbol: "S$"
};
var SBD = {
	name: "Solomon Islands Dollar",
	minor_unit: "2",
	symbol: "SI$"
};
var SOS = {
	name: "Somali Shilling",
	minor_unit: "2",
	symbol: "S"
};
var SSP = {
	name: "South Sudanese Pound",
	minor_unit: "2",
	symbol: "SS£"
};
var LKR = {
	name: "Sri Lanka Rupee",
	minor_unit: "2",
	symbol: "₨"
};
var SDG = {
	name: "Sudanese Pound",
	minor_unit: "2",
	symbol: "£"
};
var SRD = {
	name: "Surinam Dollar",
	minor_unit: "2",
	symbol: "SRD"
};
var SEK = {
	name: "Swedish Krona",
	minor_unit: "2",
	symbol: "kr"
};
var CHE = {
	name: "WIR Euro",
	minor_unit: "2",
	symbol: "CHE"
};
var CHW = {
	name: "WIR Franc",
	minor_unit: "2",
	symbol: "CHW"
};
var SYP = {
	name: "Syrian Pound",
	minor_unit: "2",
	symbol: "£"
};
var TWD = {
	name: "New Taiwan Dollar",
	minor_unit: "2",
	symbol: "NT$"
};
var TJS = {
	name: "Somoni",
	minor_unit: "2",
	symbol: "ЅМ"
};
var TZS = {
	name: "Tanzanian Shilling",
	minor_unit: "2",
	symbol: "Sh"
};
var THB = {
	name: "Baht",
	minor_unit: "2",
	symbol: "฿"
};
var TOP = {
	name: "Pa’anga",
	minor_unit: "2",
	symbol: "T$"
};
var TTD = {
	name: "Trinidad and Tobago Dollar",
	minor_unit: "2",
	symbol: "TT$"
};
var TND = {
	name: "Tunisian Dinar",
	minor_unit: "3",
	symbol: "DT"
};
var TRY = {
	name: "Turkish Lira",
	minor_unit: "2",
	symbol: "₺"
};
var TMT = {
	name: "Turkmenistan New Manat",
	minor_unit: "2",
	symbol: "T"
};
var UGX = {
	name: "Uganda Shilling",
	minor_unit: "0",
	symbol: "USh"
};
var UAH = {
	name: "Hryvnia",
	minor_unit: "2",
	symbol: "₴"
};
var AED = {
	name: "UAE Dirham",
	minor_unit: "2",
	symbol: "د.إ"
};
var UYI = {
	name: "Uruguay Peso en Unidades Indexadas (URUIURUI)",
	minor_unit: "2",
	symbol: "$U"
};
var UYU = {
	name: "Peso Uruguayo",
	minor_unit: "0",
	symbol: "$U"
};
var UYW = {
	name: "Unidad Previsional",
	minor_unit: "4",
	symbol: "UR"
};
var UZS = {
	name: "Uzbekistan Sum",
	minor_unit: "2",
	symbol: "so‘m"
};
var VUV = {
	name: "Vatu",
	minor_unit: "0",
	symbol: "VT"
};
var VES = {
	name: "Bolívar Soberano",
	minor_unit: "2",
	symbol: "Bs.S."
};
var VED = {
	name: "Bolívar Soberano",
	minor_unit: "2",
	symbol: "Bs.S."
};
var VND = {
	name: "Dong",
	minor_unit: "0",
	symbol: "₫"
};
var YER = {
	name: "Yemeni Rial",
	minor_unit: "2",
	symbol: "﷼"
};
var ZMW = {
	name: "Zambian Kwacha",
	minor_unit: "2",
	symbol: "ZK"
};
var ZWL = {
	name: "Zimbabwe Dollar",
	minor_unit: "2",
	symbol: "Z$"
};
var CURRENCY_INFO = {
	AFN: AFN,
	EUR: EUR,
	ALL: ALL,
	DZD: DZD,
	USD: USD,
	AOA: AOA,
	XCD: XCD,
	ARS: ARS,
	AMD: AMD,
	AWG: AWG,
	AUD: AUD,
	AZN: AZN,
	BSD: BSD,
	BHD: BHD,
	BDT: BDT,
	BBD: BBD,
	BYN: BYN,
	BZD: BZD,
	XOF: XOF,
	BMD: BMD,
	INR: INR,
	BTN: BTN,
	BOB: BOB,
	BOV: BOV,
	BAM: BAM,
	BWP: BWP,
	NOK: NOK,
	BRL: BRL,
	BND: BND,
	BGN: BGN,
	BIF: BIF,
	CVE: CVE,
	KHR: KHR,
	XAF: XAF,
	CAD: CAD,
	KYD: KYD,
	CLP: CLP,
	CLF: CLF,
	CNY: CNY,
	COP: COP,
	COU: COU,
	KMF: KMF,
	CDF: CDF,
	NZD: NZD,
	CRC: CRC,
	HRK: HRK,
	CUP: CUP,
	CUC: CUC,
	ANG: ANG,
	CZK: CZK,
	DKK: DKK,
	DJF: DJF,
	DOP: DOP,
	EGP: EGP,
	SVC: SVC,
	ERN: ERN,
	SZL: SZL,
	ETB: ETB,
	FKP: FKP,
	FJD: FJD,
	XPF: XPF,
	GMD: GMD,
	GEL: GEL,
	GHS: GHS,
	GIP: GIP,
	GTQ: GTQ,
	GBP: GBP,
	GNF: GNF,
	GYD: GYD,
	HTG: HTG,
	HNL: HNL,
	HKD: HKD,
	HUF: HUF,
	ISK: ISK,
	IDR: IDR,
	IRR: IRR,
	IQD: IQD,
	ILS: ILS,
	JMD: JMD,
	JPY: JPY,
	JOD: JOD,
	KZT: KZT,
	KES: KES,
	KPW: KPW,
	KRW: KRW,
	KWD: KWD,
	KGS: KGS,
	LAK: LAK,
	LBP: LBP,
	LSL: LSL,
	ZAR: ZAR,
	LRD: LRD,
	LYD: LYD,
	CHF: CHF,
	MOP: MOP,
	MKD: MKD,
	MGA: MGA,
	MWK: MWK,
	MYR: MYR,
	MVR: MVR,
	MRU: MRU,
	MUR: MUR,
	MXN: MXN,
	MXV: MXV,
	MDL: MDL,
	MNT: MNT,
	MAD: MAD,
	MZN: MZN,
	MMK: MMK,
	NAD: NAD,
	NPR: NPR,
	NIO: NIO,
	NGN: NGN,
	OMR: OMR,
	PKR: PKR,
	PAB: PAB,
	PGK: PGK,
	PYG: PYG,
	PEN: PEN,
	PHP: PHP,
	PLN: PLN,
	QAR: QAR,
	RON: RON,
	RUB: RUB,
	RWF: RWF,
	SHP: SHP,
	WST: WST,
	STN: STN,
	SAR: SAR,
	RSD: RSD,
	SCR: SCR,
	SLL: SLL,
	SGD: SGD,
	SBD: SBD,
	SOS: SOS,
	SSP: SSP,
	LKR: LKR,
	SDG: SDG,
	SRD: SRD,
	SEK: SEK,
	CHE: CHE,
	CHW: CHW,
	SYP: SYP,
	TWD: TWD,
	TJS: TJS,
	TZS: TZS,
	THB: THB,
	TOP: TOP,
	TTD: TTD,
	TND: TND,
	TRY: TRY,
	TMT: TMT,
	UGX: UGX,
	UAH: UAH,
	AED: AED,
	UYI: UYI,
	UYU: UYU,
	UYW: UYW,
	UZS: UZS,
	VUV: VUV,
	VES: VES,
	VED: VED,
	VND: VND,
	YER: YER,
	ZMW: ZMW,
	ZWL: ZWL
};

const ALLOWED_FORMAT_PARTS_KEYS = [
    'nan',
    'infinity',
    'percent',
    'integer',
    'group',
    'decimal',
    'fraction',
    'plusSign',
    'minusSign',
    'percentSign',
    'currency',
    'code',
    'symbol',
    'name',
    'compact',
    'exponentInteger',
    'exponentMinusSign',
    'exponentSeparator',
    'unit',
];
const INTL_MAPPING = {
    SGD: { $: CURRENCY_INFO.SGD.symbol }, // Singapore Dollar
    XCD: { $: CURRENCY_INFO.XCD.symbol }, // East Caribbean Dollar
    ARS: { $: CURRENCY_INFO.ARS.symbol }, // Argentine Peso
    AUD: { $: CURRENCY_INFO.AUD.symbol }, // Australian Dollar
    BSD: { $: CURRENCY_INFO.BSD.symbol }, // Bahamian Dollar
    BBD: { $: CURRENCY_INFO.BBD.symbol }, // Barbados Dollar
    BMD: { $: CURRENCY_INFO.BMD.symbol }, // Bermudian Dollar
    CVE: { $: CURRENCY_INFO.CVE.symbol }, // Cabo Verde Escudo
    CAD: { $: CURRENCY_INFO.CAD.symbol }, // Canadian Dollar
    KYD: { $: CURRENCY_INFO.KYD.symbol }, // Cayman Islands Dollar
    CLP: { $: CURRENCY_INFO.CLP.symbol }, // Chilean Peso
    COP: { $: CURRENCY_INFO.COP.symbol }, // Colombian Peso
    NZD: { $: CURRENCY_INFO.NZD.symbol }, // New Zealand Dollar
    CUP: { $: CURRENCY_INFO.CUP.symbol }, // Cuban Peso
    SVC: { $: CURRENCY_INFO.SVC.symbol }, // El Salvador Colon
    FJD: { $: CURRENCY_INFO.FJD.symbol }, // Fiji Dollar
    GYD: { $: CURRENCY_INFO.GYD.symbol }, // Guyana Dollar
    HKD: { $: CURRENCY_INFO.HKD.symbol }, // Hong Kong Dollar
    JMD: { $: CURRENCY_INFO.JMD.symbol }, // Jamaican Dollar
    LRD: { $: CURRENCY_INFO.LRD.symbol }, // Liberian Dollar
    MOP: { $: CURRENCY_INFO.MOP.symbol }, // Pataca
    MXN: { $: CURRENCY_INFO.MXN.symbol }, // Mexican Peso
    NAD: { $: CURRENCY_INFO.NAD.symbol }, // Namibia Dollar
    SBD: { $: CURRENCY_INFO.SBD.symbol }, // Solomon Islands Dollar
    SRD: { $: CURRENCY_INFO.SRD.symbol }, // Surinam Dollar
    ZWL: { $: CURRENCY_INFO.ZWL.symbol }, // Zimbabwe Dollar
    LSL: { L: CURRENCY_INFO.LSL.symbol }, // Loti
    AWG: { 'Afl.': CURRENCY_INFO.AWG.symbol }, // Aruban Florin
    BYN: { Br: CURRENCY_INFO.BYN.symbol }, // Belarusian Ruble
    XAF: { FCFA: CURRENCY_INFO.XAF.symbol }, // CFA Franc BEAC
    CNY: { '¥': CURRENCY_INFO.CNY.symbol }, // Yuan Renminbi
    EGP: { '£': CURRENCY_INFO.EGP.symbol }, // Egyptian Pound
    FKP: { '£': CURRENCY_INFO.FKP.symbol }, // Falkland Islands Pound
    LBP: { '£': CURRENCY_INFO.LBP.symbol }, // Lebanese Pound
    SSP: { '£': CURRENCY_INFO.SSP.symbol }, // South Sudanese Pound
    WST: { T: CURRENCY_INFO.WST.symbol }, // Tala
};

/**
 * This function replaces the default parameters like currency symbols, currency codes, etc.,
 * returned by the JavaScript Intl API with custom values provided by a local configuration
 * (i18nify-data). This allows for customization of how different currencies or other locale-specific
 * data are represented, providing greater control over the displayed formatting.
 *
 * @param {ByParts['rawParts']} parts - An array of parts representing the formatted components
 *                                      of a currency amount, as generated by Intl.NumberFormat.
 * @param {string} currencyCode - The currency code (e.g., 'USD', 'EUR') for which the replacement
 *                                values should be applied.
 * @returns {ByParts['rawParts']} - The modified array of parts with replaced values based on the
 *                                  local i18nify configuration.
 */
const transformPartsFromIntl = (parts, currencyCode) => {
    // Loop through each part of the formatted amount
    for (let i = 0; i < parts.length; i++) {
        const part = parts[i];
        if (part.type === 'currency' && currencyCode in INTL_MAPPING) {
            const mapping = INTL_MAPPING[currencyCode];
            if (part.value in mapping) {
                parts[i].value = mapping[part.value];
                break; // Exit the loop after the first replacement
            }
        }
    }
    return parts;
};

// this function formats number based on different arguments passed
const formatNumber = (amount, options = {}) => {
    // Validate the amount parameter to ensure it is a number
    if (!Number(amount) && Number(amount) !== 0)
        throw new Error(`Parameter 'amount' is not a valid number. The received value was: ${amount} of type ${typeof amount}. Please ensure you pass a valid number.`);
    try {
        // Get an instance of Intl.NumberFormat with the provided options
        const formattedAmount = getIntlInstanceWithOptions(options).formatToParts(Number(amount));
        let parts = formattedAmount;
        const intlOptions = (options === null || options === void 0 ? void 0 : options.intlOptions) ? Object.assign({}, options.intlOptions) : {};
        const currencyCode = ((options === null || options === void 0 ? void 0 : options.currency) || intlOptions.currency);
        parts = transformPartsFromIntl(parts, currencyCode);
        // Join the parts back together to form the final formatted string
        return parts.map((p) => p.value).join('');
    }
    catch (err) {
        if (err instanceof Error) {
            throw new Error(`An error occurred while formatting the number: ${err.message}`);
        }
        else {
            throw new Error(`An unknown error occurred. Error details: ${err}`);
        }
    }
};
var formatNumber$1 = withErrorBoundary(formatNumber);

const getCurrencyList = () => {
    return CURRENCY_INFO;
};
var getCurrencyList$1 = withErrorBoundary(getCurrencyList);

const getCurrencySymbol = (currencyCode) => {
    var _a;
    const currencyInformation = CURRENCY_INFO;
    if (currencyCode in currencyInformation)
        return (_a = currencyInformation[currencyCode]) === null || _a === void 0 ? void 0 : _a.symbol;
    else
        throw new Error(`The provided currency code is invalid. The received value was: ${String(currencyCode)}. Please ensure you pass a valid currency code. Check valid currency codes here: https://github.com/razorpay/i18nify/blob/master/i18nify-data/currency/data.json`);
};
var getCurrencySymbol$1 = withErrorBoundary(getCurrencySymbol);

const formatNumberByParts = (amount, options = {}) => {
    // Validate the amount parameter to ensure it is a number
    if (!Number(amount) && Number(amount) !== 0)
        throw new Error(`Parameter 'amount' is not a valid number. The received value was: ${amount} of type ${typeof amount}. Please ensure you pass a valid number.`);
    try {
        // Get an instance of Intl.NumberFormat with the provided options
        const formattedAmount = getIntlInstanceWithOptions(options).formatToParts(Number(amount));
        let parts = formattedAmount;
        const formattedObj = {};
        const intlOptions = (options === null || options === void 0 ? void 0 : options.intlOptions) ? Object.assign({}, options.intlOptions) : {};
        const currencyCode = ((options === null || options === void 0 ? void 0 : options.currency) || intlOptions.currency);
        parts = transformPartsFromIntl(parts, currencyCode);
        parts.forEach((p) => {
            // If the part is a group separator, add it to the integer part
            if (p.type === 'group') {
                formattedObj.integer = (formattedObj.integer || '') + p.value;
            }
            else if (ALLOWED_FORMAT_PARTS_KEYS.findIndex((item) => item === p.type) != -1) {
                // If the part type is allowed, add it to the formatted object
                // @ts-expect-error only allowed keys are added to the formattedObj. For eg, key 'literal' is skipped
                formattedObj[p.type] = (formattedObj[p.type] || '') + p.value;
            }
        });
        return Object.assign(Object.assign({}, formattedObj), { isPrefixSymbol: parts.findIndex((item) => item.type === 'currency') <
                parts.findIndex((item) => item.type === 'integer'), rawParts: parts });
    }
    catch (err) {
        if (err instanceof Error) {
            throw new Error(`An error occurred while formatting the number: ${err.message}`);
        }
        else {
            throw new Error(`An unknown error occurred. Error details: ${err}`);
        }
    }
};
var formatNumberByParts$1 = withErrorBoundary(formatNumberByParts);

/**
 * Converts an amount from a minor currency unit to a major currency unit.
 *
 * The function takes an amount in the minor unit (e.g., cents, pence) and a currency code,
 * then converts the amount to the major unit (e.g., dollars, pounds) using the conversion rate
 * defined in the CURRENCY_INFO object. If the currency code is not supported, it throws an error.
 *
 * @param {number} amount - The amount in the minor currency unit.
 * @param {object} options - The options object
 * @returns {number} - The amount converted to the major currency unit.
 * @throws Will throw an error if the currency code is not supported.
 */
const convertToMajorUnit = (amount, options) => {
    const currencyInfo = CURRENCY_INFO[options.currency];
    if (!options.currency || !currencyInfo) {
        throw new Error(`The provided currency code is either empty or not supported. The received value was ${options.currency === '' ? 'an empty string' : `: ${String(options.currency)}`}. Please ensure you pass a valid currency code. Check valid currency codes here: https://github.com/razorpay/i18nify/blob/master/i18nify-data/currency/data.json`);
    }
    const minorUnitMultiplier = Math.pow(10, Number(currencyInfo.minor_unit)) || 100;
    const higherCurrencyValue = amount / minorUnitMultiplier;
    return higherCurrencyValue;
};
var convertToMajorUnit$1 = withErrorBoundary(convertToMajorUnit);

/**
 * Converts an amount from a major currency unit to a minor currency unit.
 *
 * The function takes an amount in the major unit (e.g., dollars, pounds) and a currency code,
 * then converts the amount to the minor unit (e.g., cents, pence) using the conversion rate
 * defined in the CURRENCY_INFO object. If the currency code is not supported, it throws an error.
 *
 * @param {number} amount - The amount in the major currency unit.
 * @param {object} options - The options object
 * @returns {number} - The amount converted to the minor currency unit.
 * @throws Will throw an error if the currency code is not supported.
 */
const convertToMinorUnit = (amount, options) => {
    const currencyInfo = CURRENCY_INFO[options.currency];
    if (!options.currency || !currencyInfo) {
        throw new Error(`The provided currency code is either empty or not supported. The received value was ${options.currency === '' ? 'an empty string' : `: ${String(options.currency)}`}. Please ensure you pass a valid currency code. Check valid currency codes here: https://github.com/razorpay/i18nify/blob/master/i18nify-data/currency/data.json`);
    }
    const minorUnitMultiplier = Math.pow(10, Number(currencyInfo.minor_unit)) || 100;
    const lowerCurrencyValue = amount * minorUnitMultiplier;
    return lowerCurrencyValue;
};
var convertToMinorUnit$1 = withErrorBoundary(convertToMinorUnit);

export { convertToMajorUnit$1 as convertToMajorUnit, convertToMinorUnit$1 as convertToMinorUnit, formatNumber$1 as formatNumber, formatNumberByParts$1 as formatNumberByParts, getCurrencyList$1 as getCurrencyList, getCurrencySymbol$1 as getCurrencySymbol };
//# sourceMappingURL=index.js.map
