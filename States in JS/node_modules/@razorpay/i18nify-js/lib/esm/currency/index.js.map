{"version":3,"file":"index.js","sources":["../../../src/modules/.internal/utils/getIntlInstanceWithOptions.ts","../../../src/modules/currency/constants.ts","../../../src/modules/currency/utils.ts","../../../src/modules/currency/formatNumber.ts","../../../src/modules/currency/getCurrencyList.ts","../../../src/modules/currency/getCurrencySymbol.ts","../../../src/modules/currency/formatNumberByParts.ts","../../../src/modules/currency/convertToMajorUnit.ts","../../../src/modules/currency/convertToMinorUnit.ts"],"sourcesContent":["import type {\n  CurrencyCodeType,\n  I18nifyNumberFormatOptions,\n} from '../../currency/types';\nimport { getLocale } from './getLocale';\n\nexport const getIntlInstanceWithOptions = (\n  options: {\n    currency?: CurrencyCodeType;\n    locale?: string;\n    intlOptions?: I18nifyNumberFormatOptions;\n  } = {},\n) => {\n  const locale = getLocale(options);\n\n  const intlOptions = options?.intlOptions ? { ...options.intlOptions } : {};\n\n  if (options?.currency || intlOptions.currency) {\n    intlOptions.style = 'currency';\n    intlOptions.currency = (options.currency || intlOptions.currency) as string;\n  }\n\n  if (!locale)\n    throw new Error(\n      `The provided locale value is invalid. The received value was: ${locale}. Please ensure you pass a correct locale string for proper formatting.`,\n    );\n\n  return new Intl.NumberFormat(\n    locale || undefined,\n    intlOptions as Intl.NumberFormatOptions,\n  );\n};\n","import CURRENCY_INFO from './data/currencyConfig.json';\n\nexport const ALLOWED_FORMAT_PARTS_KEYS = [\n  'nan',\n  'infinity',\n  'percent',\n  'integer',\n  'group',\n  'decimal',\n  'fraction',\n  'plusSign',\n  'minusSign',\n  'percentSign',\n  'currency',\n  'code',\n  'symbol',\n  'name',\n  'compact',\n  'exponentInteger',\n  'exponentMinusSign',\n  'exponentSeparator',\n  'unit',\n] as const;\n\nexport const INTL_MAPPING = {\n  SGD: { $: CURRENCY_INFO.SGD.symbol }, // Singapore Dollar\n  XCD: { $: CURRENCY_INFO.XCD.symbol }, // East Caribbean Dollar\n  ARS: { $: CURRENCY_INFO.ARS.symbol }, // Argentine Peso\n  AUD: { $: CURRENCY_INFO.AUD.symbol }, // Australian Dollar\n  BSD: { $: CURRENCY_INFO.BSD.symbol }, // Bahamian Dollar\n  BBD: { $: CURRENCY_INFO.BBD.symbol }, // Barbados Dollar\n  BMD: { $: CURRENCY_INFO.BMD.symbol }, // Bermudian Dollar\n  CVE: { $: CURRENCY_INFO.CVE.symbol }, // Cabo Verde Escudo\n  CAD: { $: CURRENCY_INFO.CAD.symbol }, // Canadian Dollar\n  KYD: { $: CURRENCY_INFO.KYD.symbol }, // Cayman Islands Dollar\n  CLP: { $: CURRENCY_INFO.CLP.symbol }, // Chilean Peso\n  COP: { $: CURRENCY_INFO.COP.symbol }, // Colombian Peso\n  NZD: { $: CURRENCY_INFO.NZD.symbol }, // New Zealand Dollar\n  CUP: { $: CURRENCY_INFO.CUP.symbol }, // Cuban Peso\n  SVC: { $: CURRENCY_INFO.SVC.symbol }, // El Salvador Colon\n  FJD: { $: CURRENCY_INFO.FJD.symbol }, // Fiji Dollar\n  GYD: { $: CURRENCY_INFO.GYD.symbol }, // Guyana Dollar\n  HKD: { $: CURRENCY_INFO.HKD.symbol }, // Hong Kong Dollar\n  JMD: { $: CURRENCY_INFO.JMD.symbol }, // Jamaican Dollar\n  LRD: { $: CURRENCY_INFO.LRD.symbol }, // Liberian Dollar\n  MOP: { $: CURRENCY_INFO.MOP.symbol }, // Pataca\n  MXN: { $: CURRENCY_INFO.MXN.symbol }, // Mexican Peso\n  NAD: { $: CURRENCY_INFO.NAD.symbol }, // Namibia Dollar\n  SBD: { $: CURRENCY_INFO.SBD.symbol }, // Solomon Islands Dollar\n  SRD: { $: CURRENCY_INFO.SRD.symbol }, // Surinam Dollar\n  ZWL: { $: CURRENCY_INFO.ZWL.symbol }, // Zimbabwe Dollar\n  LSL: { L: CURRENCY_INFO.LSL.symbol }, // Loti\n  AWG: { 'Afl.': CURRENCY_INFO.AWG.symbol }, // Aruban Florin\n  BYN: { Br: CURRENCY_INFO.BYN.symbol }, // Belarusian Ruble\n  XAF: { FCFA: CURRENCY_INFO.XAF.symbol }, // CFA Franc BEAC\n  CNY: { '¥': CURRENCY_INFO.CNY.symbol }, // Yuan Renminbi\n  EGP: { '£': CURRENCY_INFO.EGP.symbol }, // Egyptian Pound\n  FKP: { '£': CURRENCY_INFO.FKP.symbol }, // Falkland Islands Pound\n  LBP: { '£': CURRENCY_INFO.LBP.symbol }, // Lebanese Pound\n  SSP: { '£': CURRENCY_INFO.SSP.symbol }, // South Sudanese Pound\n  WST: { T: CURRENCY_INFO.WST.symbol }, // Tala\n};\n","import { INTL_MAPPING } from './constants';\nimport { ByParts } from './types';\n\n/**\n * This function replaces the default parameters like currency symbols, currency codes, etc.,\n * returned by the JavaScript Intl API with custom values provided by a local configuration\n * (i18nify-data). This allows for customization of how different currencies or other locale-specific\n * data are represented, providing greater control over the displayed formatting.\n *\n * @param {ByParts['rawParts']} parts - An array of parts representing the formatted components\n *                                      of a currency amount, as generated by Intl.NumberFormat.\n * @param {string} currencyCode - The currency code (e.g., 'USD', 'EUR') for which the replacement\n *                                values should be applied.\n * @returns {ByParts['rawParts']} - The modified array of parts with replaced values based on the\n *                                  local i18nify configuration.\n */\nexport const transformPartsFromIntl = (\n  parts: ByParts['rawParts'],\n  currencyCode: string,\n): ByParts['rawParts'] => {\n  // Loop through each part of the formatted amount\n  for (let i = 0; i < parts.length; i++) {\n    const part = parts[i];\n\n    if (part.type === 'currency' && currencyCode in INTL_MAPPING) {\n      const mapping = INTL_MAPPING[currencyCode as keyof typeof INTL_MAPPING];\n      if ((part.value as any) in mapping) {\n        parts[i].value = mapping[part.value as keyof typeof mapping];\n        break; // Exit the loop after the first replacement\n      }\n    }\n  }\n\n  return parts;\n};\n","import { withErrorBoundary } from '../../common/errorBoundary';\nimport { getIntlInstanceWithOptions } from '../.internal/utils';\nimport { ByParts, CurrencyCodeType, I18nifyNumberFormatOptions } from './types';\nimport { transformPartsFromIntl } from './utils';\n\n// this function formats number based on different arguments passed\nconst formatNumber = (\n  amount: string | number,\n  options: {\n    currency?: CurrencyCodeType;\n    locale?: string;\n    intlOptions?: I18nifyNumberFormatOptions;\n  } = {},\n): string => {\n  // Validate the amount parameter to ensure it is a number\n  if (!Number(amount) && Number(amount) !== 0)\n    throw new Error(\n      `Parameter 'amount' is not a valid number. The received value was: ${amount} of type ${typeof amount}. Please ensure you pass a valid number.`,\n    );\n\n  try {\n    // Get an instance of Intl.NumberFormat with the provided options\n    const formattedAmount = getIntlInstanceWithOptions(options).formatToParts(\n      Number(amount),\n    );\n\n    let parts: ByParts['rawParts'] = formattedAmount;\n    const intlOptions = options?.intlOptions ? { ...options.intlOptions } : {};\n    const currencyCode = (options?.currency || intlOptions.currency) as string;\n\n    parts = transformPartsFromIntl(parts, currencyCode);\n\n    // Join the parts back together to form the final formatted string\n    return parts.map((p) => p.value).join('');\n  } catch (err) {\n    if (err instanceof Error) {\n      throw new Error(\n        `An error occurred while formatting the number: ${err.message}`,\n      );\n    } else {\n      throw new Error(`An unknown error occurred. Error details: ${err}`);\n    }\n  }\n};\n\nexport default withErrorBoundary<typeof formatNumber>(formatNumber);\n","import { withErrorBoundary } from '../../common/errorBoundary';\nimport CURRENCY_INFO from './data/currencyConfig.json';\n\nconst getCurrencyList = () => {\n  return CURRENCY_INFO;\n};\n\nexport default withErrorBoundary<typeof getCurrencyList>(getCurrencyList);\n","import { withErrorBoundary } from '../../common/errorBoundary';\nimport { CurrencyCodeType } from './types';\nimport CURRENCY_INFO from './data/currencyConfig.json';\n\nconst getCurrencySymbol = (currencyCode: CurrencyCodeType): string => {\n  const currencyInformation = CURRENCY_INFO;\n  if (currencyCode in currencyInformation)\n    return currencyInformation[currencyCode]?.symbol;\n  else\n    throw new Error(\n      `The provided currency code is invalid. The received value was: ${String(currencyCode)}. Please ensure you pass a valid currency code. Check valid currency codes here: https://github.com/razorpay/i18nify/blob/master/i18nify-data/currency/data.json`,\n    );\n};\n\nexport default withErrorBoundary<typeof getCurrencySymbol>(getCurrencySymbol);\n","import {\n  ByParts,\n  CurrencyCodeType,\n  FormattedPartsObject,\n  I18nifyNumberFormatOptions,\n} from './types';\nimport { withErrorBoundary } from '../../common/errorBoundary';\nimport { getIntlInstanceWithOptions } from '../.internal/utils';\nimport { ALLOWED_FORMAT_PARTS_KEYS } from './constants';\nimport { transformPartsFromIntl } from './utils';\n\nconst formatNumberByParts = (\n  amount: string | number,\n  options: {\n    currency?: CurrencyCodeType;\n    locale?: string;\n    intlOptions?: I18nifyNumberFormatOptions;\n  } = {},\n): ByParts => {\n  // Validate the amount parameter to ensure it is a number\n  if (!Number(amount) && Number(amount) !== 0)\n    throw new Error(\n      `Parameter 'amount' is not a valid number. The received value was: ${amount} of type ${typeof amount}. Please ensure you pass a valid number.`,\n    );\n\n  try {\n    // Get an instance of Intl.NumberFormat with the provided options\n    const formattedAmount = getIntlInstanceWithOptions(options).formatToParts(\n      Number(amount),\n    );\n\n    let parts: ByParts['rawParts'] = formattedAmount;\n    const formattedObj: FormattedPartsObject = {};\n    const intlOptions = options?.intlOptions ? { ...options.intlOptions } : {};\n    const currencyCode = (options?.currency || intlOptions.currency) as string;\n\n    parts = transformPartsFromIntl(parts, currencyCode);\n\n    parts.forEach((p) => {\n      // If the part is a group separator, add it to the integer part\n      if (p.type === 'group') {\n        formattedObj.integer = (formattedObj.integer || '') + p.value;\n      } else if (\n        ALLOWED_FORMAT_PARTS_KEYS.findIndex((item) => item === p.type) != -1\n      ) {\n        // If the part type is allowed, add it to the formatted object\n        // @ts-expect-error only allowed keys are added to the formattedObj. For eg, key 'literal' is skipped\n        formattedObj[p.type] = (formattedObj[p.type] || '') + p.value;\n      }\n    });\n\n    return {\n      ...formattedObj,\n      isPrefixSymbol:\n        parts.findIndex((item) => item.type === 'currency') <\n        parts.findIndex((item) => item.type === 'integer'),\n      rawParts: parts,\n    };\n  } catch (err) {\n    if (err instanceof Error) {\n      throw new Error(\n        `An error occurred while formatting the number: ${err.message}`,\n      );\n    } else {\n      throw new Error(`An unknown error occurred. Error details: ${err}`);\n    }\n  }\n};\n\nexport default withErrorBoundary<typeof formatNumberByParts>(\n  formatNumberByParts,\n);\n","import { withErrorBoundary } from '../../common/errorBoundary';\nimport { CurrencyCodeType } from './types';\nimport CURRENCY_INFO from './data/currencyConfig.json';\n\n/**\n * Converts an amount from a minor currency unit to a major currency unit.\n *\n * The function takes an amount in the minor unit (e.g., cents, pence) and a currency code,\n * then converts the amount to the major unit (e.g., dollars, pounds) using the conversion rate\n * defined in the CURRENCY_INFO object. If the currency code is not supported, it throws an error.\n *\n * @param {number} amount - The amount in the minor currency unit.\n * @param {object} options - The options object\n * @returns {number} - The amount converted to the major currency unit.\n * @throws Will throw an error if the currency code is not supported.\n */\nconst convertToMajorUnit = (\n  amount: number,\n  options: {\n    currency: CurrencyCodeType;\n  },\n): number => {\n  const currencyInfo = CURRENCY_INFO[options.currency];\n\n  if (!options.currency || !currencyInfo) {\n    throw new Error(\n      `The provided currency code is either empty or not supported. The received value was ${(options.currency as any) === '' ? 'an empty string' : `: ${String(options.currency)}`}. Please ensure you pass a valid currency code. Check valid currency codes here: https://github.com/razorpay/i18nify/blob/master/i18nify-data/currency/data.json`,\n    );\n  }\n\n  const minorUnitMultiplier =\n    Math.pow(10, Number(currencyInfo.minor_unit)) || 100;\n\n  const higherCurrencyValue = amount / minorUnitMultiplier;\n  return higherCurrencyValue;\n};\n\nexport default withErrorBoundary<typeof convertToMajorUnit>(convertToMajorUnit);\n","import { withErrorBoundary } from '../../common/errorBoundary';\nimport { CurrencyCodeType } from './types';\nimport CURRENCY_INFO from './data/currencyConfig.json';\n\n/**\n * Converts an amount from a major currency unit to a minor currency unit.\n *\n * The function takes an amount in the major unit (e.g., dollars, pounds) and a currency code,\n * then converts the amount to the minor unit (e.g., cents, pence) using the conversion rate\n * defined in the CURRENCY_INFO object. If the currency code is not supported, it throws an error.\n *\n * @param {number} amount - The amount in the major currency unit.\n * @param {object} options - The options object\n * @returns {number} - The amount converted to the minor currency unit.\n * @throws Will throw an error if the currency code is not supported.\n */\nconst convertToMinorUnit = (\n  amount: number,\n  options: {\n    currency: CurrencyCodeType;\n  },\n): number => {\n  const currencyInfo = CURRENCY_INFO[options.currency];\n\n  if (!options.currency || !currencyInfo) {\n    throw new Error(\n      `The provided currency code is either empty or not supported. The received value was ${(options.currency as any) === '' ? 'an empty string' : `: ${String(options.currency)}`}. Please ensure you pass a valid currency code. Check valid currency codes here: https://github.com/razorpay/i18nify/blob/master/i18nify-data/currency/data.json`,\n    );\n  }\n\n  const minorUnitMultiplier =\n    Math.pow(10, Number(currencyInfo.minor_unit)) || 100;\n\n  const lowerCurrencyValue = amount * minorUnitMultiplier;\n  return lowerCurrencyValue;\n};\n\nexport default withErrorBoundary<typeof convertToMinorUnit>(convertToMinorUnit);\n"],"names":[],"mappings":";;;;AAMO,MAAM,0BAA0B,GAAG,CACxC,OAII,GAAA,EAAE,KACJ;AACF,IAAA,MAAM,MAAM,GAAG,SAAS,CAAC,OAAO,CAAC,CAAC;IAElC,MAAM,WAAW,GAAG,CAAA,OAAO,aAAP,OAAO,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAP,OAAO,CAAE,WAAW,IAAE,MAAA,CAAA,MAAA,CAAA,EAAA,EAAM,OAAO,CAAC,WAAW,IAAK,EAAE,CAAC;AAE3E,IAAA,IAAI,CAAA,OAAO,KAAP,IAAA,IAAA,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,QAAQ,KAAI,WAAW,CAAC,QAAQ,EAAE;AAC7C,QAAA,WAAW,CAAC,KAAK,GAAG,UAAU,CAAC;AAC/B,QAAA,WAAW,CAAC,QAAQ,IAAI,OAAO,CAAC,QAAQ,IAAI,WAAW,CAAC,QAAQ,CAAW,CAAC;KAC7E;AAED,IAAA,IAAI,CAAC,MAAM;AACT,QAAA,MAAM,IAAI,KAAK,CACb,iEAAiE,MAAM,CAAA,uEAAA,CAAyE,CACjJ,CAAC;IAEJ,OAAO,IAAI,IAAI,CAAC,YAAY,CAC1B,MAAM,IAAI,SAAS,EACnB,WAAuC,CACxyBAAyB,GAAG;IACvC,KAAK;IACL,UAAU;IACV,SAAS;IACT,SAAS;IACT,OAAO;IACP,SAAS;IACT,UAAU;IACV,UAAU;IACV,WAAW;IACX,aAAa;IACb,UAAU;IACV,MAAM;IACN,QAAQ;IACR,MAAM;IACN,SAAS;IACT,iBAAiB;IACjB,mBAAmB;IACnB,mBAAmB;IACnB,MAAM;CACE,CAAC;AAEJ,MAAM,YAAY,GAAG;IAC1B,GAAG,EAAE,EAAE,CAAC,EAAE,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE;IACpC,GAAG,EAAE,EAAE,CAAC,EAAE,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE;IACpC,GAAG,EAAE,EAAE,CAAC,EAAE,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE;IACpC,GAAG,EAAE,EAAE,CAAC,EAAE,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE;IACpC,GAAG,EAAE,EAAE,CAAC,EAAE,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE;IACpC,GAAG,EAAE,EAAE,CAAC,EAAE,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE;IACpC,GAAG,EAAE,EAAE,CAAC,EAAE,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE;IACpC,GAAG,EAAE,EAAE,CAAC,EAAE,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE;IACpC,GAAG,EAAE,EAAE,CAAC,EAAE,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE;IACpC,GAAG,EAAE,EAAE,CAAC,EAAE,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE;IACpC,GAAG,EAAE,EAAE,CAAC,EAAE,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE;IACpC,GAAG,EAAE,EAAE,CAAC,EAAE,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE;IACpC,GAAG,EAAE,EAAE,CAAC,EAAE,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE;IACpC,GAAG,EAAE,EAAE,CAAC,EAAE,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE;IACpC,GAAG,EAAE,EAAE,CAAC,EAAE,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE;IACpC,GAAG,EAAE,EAAE,CAAC,EAAE,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE;IACpC,GAAG,EAAE,EAAE,CAAC,EAAE,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE;IACpC,GAAG,EAAE,EAAE,CAAC,EAAE,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE;IACpC,GAAG,EAAE,EAAE,CAAC,EAAE,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE;IACpC,GAAG,EAAE,EAAE,CAAC,EAAE,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE;IACpC,GAAG,EAAE,EAAE,CAAC,EAAE,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE;IACpC,GAAG,EAAE,EAAE,CAAC,EAAE,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE;IACpC,GAAG,EAAE,EAAE,CAAC,EAAE,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE;IACpC,GAAG,EAAE,EAAE,CAAC,EAAE,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE;IACpC,GAAG,EAAE,EAAE,CAAC,EAAE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"}