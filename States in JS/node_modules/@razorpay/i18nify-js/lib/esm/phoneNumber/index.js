import { w as withErrorBoundary } from '../index-hH4j_WbX.js';

var AF$1 = "[2-7]\\d{8}";
var AX$1 = "2\\d{4,9}|35\\d{4,5}|(?:60\\d\\d|800)\\d{4,6}|7\\d{5,11}|(?:[14]\\d|3[0-46-9]|50)\\d{4,8}";
var AL$1 = "(?:700\\d\\d|900)\\d{3}|8\\d{5,7}|(?:[2-5]|6\\d)\\d{7}";
var DZ$1 = "(?:[1-4]|[5-79]\\d|80)\\d{7}";
var AS$1 = "(?:[58]\\d\\d|684|900)\\d{7}";
var AD$1 = "(?:1|6\\d)\\d{7}|[135-9]\\d{5}";
var AO$1 = "[29]\\d{8}";
var AI$1 = "(?:264|[58]\\d\\d|900)\\d{7}";
var AQ$1 = "";
var AG$1 = "(?:268|[58]\\d\\d|900)\\d{7}";
var AR$1 = "(?:11|[89]\\d\\d)\\d{8}|[2368]\\d{9}";
var AM$1 = "(?:[1-489]\\d|55|60|77)\\d{6}";
var AW$1 = "(?:[25-79]\\d\\d|800)\\d{4}";
var AU$1 = "1(?:[0-79]\\d{7}(?:\\d(?:\\d{2})?)?|8[0-24-9]\\d{7})|[2-478]\\d{8}|1\\d{4,7}";
var AT$1 = "1\\d{3,12}|2\\d{6,12}|43(?:(?:0\\d|5[02-9])\\d{3,9}|2\\d{4,5}|[3467]\\d{4}|8\\d{4,6}|9\\d{4,7})|5\\d{4,12}|8\\d{7,12}|9\\d{8,12}|(?:[367]\\d|4[0-24-9])\\d{4,11}";
var AZ$1 = "365\\d{6}|(?:[124579]\\d|60|88)\\d{7}";
var BS$1 = "(?:242|[58]\\d\\d|900)\\d{7}";
var BH$1 = "[136-9]\\d{7}";
var BD$1 = "[1-469]\\d{9}|8[0-79]\\d{7,8}|[2-79]\\d{8}|[2-9]\\d{7}|[3-9]\\d{6}|[57-9]\\d{5}";
var BB$1 = "(?:246|[58]\\d\\d|900)\\d{7}";
var BY$1 = "(?:[12]\\d|33|44|902)\\d{7}|8(?:0[0-79]\\d{5,7}|[1-7]\\d{9})|8(?:1[0-489]|[5-79]\\d)\\d{7}|8[1-79]\\d{6,7}|8[0-79]\\d{5}|8\\d{5}";
var BE$1 = "4\\d{8}|[1-9]\\d{7}";
var BZ$1 = "(?:0800\\d|[2-8])\\d{6}";
var BJ$1 = "[24-689]\\d{7}";
var BM$1 = "(?:441|[58]\\d\\d|900)\\d{7}";
var BT$1 = "[17]\\d{7}|[2-8]\\d{6}";
var BO$1 = "(?:[2-467]\\d\\d|8001)\\d{5}";
var BQ$1 = "(?:[34]1|7\\d)\\d{5}";
var BA$1 = "6\\d{8}|(?:[35689]\\d|49|70)\\d{6}";
var BW$1 = "(?:0800|(?:[37]|800)\\d)\\d{6}|(?:[2-6]\\d|90)\\d{5}";
var BV$1 = "";
var BR$1 = "(?:[1-46-9]\\d\\d|5(?:[0-46-9]\\d|5[0-46-9]))\\d{8}|[1-9]\\d{9}|[3589]\\d{8}|[34]\\d{7}";
var IO$1 = "3\\d{6}";
var BN$1 = "[2-578]\\d{6}";
var BG$1 = "00800\\d{7}|[2-7]\\d{6,7}|[89]\\d{6,8}|2\\d{5}";
var BF$1 = "[025-7]\\d{7}";
var BI$1 = "(?:[267]\\d|31)\\d{6}";
var CV$1 = "(?:[2-59]\\d\\d|800)\\d{4}";
var KH$1 = "1\\d{9}|[1-9]\\d{7,8}";
var CM$1 = "[26]\\d{8}|88\\d{6,7}";
var CA$1 = "(?:[2-8]\\d|90)\\d{8}|3\\d{6}";
var KY$1 = "(?:345|[58]\\d\\d|900)\\d{7}";
var CF$1 = "(?:[27]\\d{3}|8776)\\d{4}";
var TD$1 = "(?:22|[69]\\d|77)\\d{6}";
var CL$1 = "12300\\d{6}|6\\d{9,10}|[2-9]\\d{8}";
var CN$1 = "1[127]\\d{8,9}|2\\d{9}(?:\\d{2})?|[12]\\d{6,7}|86\\d{6}|(?:1[03-689]\\d|6)\\d{7,9}|(?:[3-579]\\d|8[0-57-9])\\d{6,9}";
var CX$1 = "1(?:[0-79]\\d{8}(?:\\d{2})?|8[0-24-9]\\d{7})|[148]\\d{8}|1\\d{5,7}";
var CC$1 = "1(?:[0-79]\\d{8}(?:\\d{2})?|8[0-24-9]\\d{7})|[148]\\d{8}|1\\d{5,7}";
var CO$1 = "(?:60\\d\\d|9101)\\d{6}|(?:1\\d|3)\\d{9}";
var KM$1 = "[3478]\\d{6}";
var CD$1 = "[189]\\d{8}|[1-68]\\d{6}";
var CG$1 = "222\\d{6}|(?:0\\d|80)\\d{7}";
var CK$1 = "[2-578]\\d{4}";
var CR$1 = "(?:8\\d|90)\\d{8}|(?:[24-8]\\d{3}|3005)\\d{4}";
var CI$1 = "[02]\\d{9}";
var HR$1 = "(?:[24-69]\\d|3[0-79])\\d{7}|80\\d{5,7}|[1-79]\\d{7}|6\\d{5,6}";
var CU$1 = "(?:[2-7]|8\\d\\d)\\d{7}|[2-47]\\d{6}|[34]\\d{5}";
var CW$1 = "(?:[34]1|60|(?:7|9\\d)\\d)\\d{5}";
var CY$1 = "(?:[279]\\d|[58]0)\\d{6}";
var CZ$1 = "(?:[2-578]\\d|60)\\d{7}|9\\d{8,11}";
var DK$1 = "[2-9]\\d{7}";
var DJ$1 = "(?:2\\d|77)\\d{6}";
var DM$1 = "(?:[58]\\d\\d|767|900)\\d{7}";
var DO$1 = "(?:[58]\\d\\d|900)\\d{7}";
var EC$1 = "1\\d{9,10}|(?:[2-7]|9\\d)\\d{7}";
var EG$1 = "[189]\\d{8,9}|[24-6]\\d{8}|[135]\\d{7}";
var SV$1 = "[267]\\d{7}|(?:80\\d|900)\\d{4}(?:\\d{4})?";
var GQ$1 = "222\\d{6}|(?:3\\d|55|[89]0)\\d{7}";
var ER$1 = "[178]\\d{6}";
var EE$1 = "8\\d{9}|[4578]\\d{7}|(?:[3-8]\\d|90)\\d{5}";
var SZ$1 = "0800\\d{4}|(?:[237]\\d|900)\\d{6}";
var ET$1 = "(?:11|[2-579]\\d)\\d{7}";
var FK$1 = "[2-7]\\d{4}";
var FO$1 = "[2-9]\\d{5}";
var FJ$1 = "45\\d{5}|(?:0800\\d|[235-9])\\d{6}";
var FI$1 = "[1-35689]\\d{4}|7\\d{10,11}|(?:[124-7]\\d|3[0-46-9])\\d{8}|[1-9]\\d{5,8}";
var FR$1 = "[1-9]\\d{8}";
var GF$1 = "[56]94\\d{6}|(?:80|9\\d)\\d{7}";
var PF$1 = "4\\d{5}(?:\\d{2})?|8\\d{7,8}";
var TF$1 = "";
var GA$1 = "(?:[067]\\d|11)\\d{6}|[2-7]\\d{6}";
var GM$1 = "[2-9]\\d{6}";
var GE$1 = "(?:[3-57]\\d\\d|800)\\d{6}";
var DE$1 = "[2579]\\d{5,14}|49(?:[34]0|69|8\\d)\\d\\d?|49(?:37|49|60|7[089]|9\\d)\\d{1,3}|49(?:2[024-9]|3[2-689]|7[1-7])\\d{1,8}|(?:1|[368]\\d|4[0-8])\\d{3,13}|49(?:[015]\\d|2[13]|31|[46][1-8])\\d{1,9}";
var GH$1 = "(?:[235]\\d{3}|800)\\d{5}";
var GI$1 = "(?:[25]\\d|60)\\d{6}";
var GR$1 = "5005000\\d{3}|8\\d{9,11}|(?:[269]\\d|70)\\d{8}";
var GL$1 = "(?:19|[2-689]\\d|70)\\d{4}";
var GD$1 = "(?:473|[58]\\d\\d|900)\\d{7}";
var GP$1 = "590\\d{6}|(?:69|80|9\\d)\\d{7}";
var GU$1 = "(?:[58]\\d\\d|671|900)\\d{7}";
var GT$1 = "80\\d{6}|(?:1\\d{3}|[2-7])\\d{7}";
var GG$1 = "(?:1481|[357-9]\\d{3})\\d{6}|8\\d{6}(?:\\d{2})?";
var GN$1 = "722\\d{6}|(?:3|6\\d)\\d{7}";
var GW$1 = "[49]\\d{8}|4\\d{6}";
var GY$1 = "(?:[2-8]\\d{3}|9008)\\d{3}";
var HT$1 = "(?:[2-489]\\d|55)\\d{6}";
var HM$1 = "";
var VA$1 = "0\\d{5,10}|3[0-8]\\d{7,10}|55\\d{8}|8\\d{5}(?:\\d{2,4})?|(?:1\\d|39)\\d{7,8}";
var HN$1 = "8\\d{10}|[237-9]\\d{7}";
var HK$1 = "8[0-46-9]\\d{6,7}|9\\d{4,7}|(?:[2-7]|9\\d{3})\\d{7}";
var HU$1 = "[235-7]\\d{8}|[1-9]\\d{7}";
var IS$1 = "(?:38\\d|[4-9])\\d{6}";
var IN$1 = "(?:000800|[2-9]\\d\\d)\\d{7}|1\\d{7,12}";
var ID$1 = "(?:(?:00[1-9]|8\\d)\\d{4}|[1-36])\\d{6}|00\\d{10}|[1-9]\\d{8,10}|[2-9]\\d{7}";
var IR$1 = "[1-9]\\d{9}|(?:[1-8]\\d\\d|9)\\d{3,4}";
var IQ$1 = "(?:1|7\\d\\d)\\d{7}|[2-6]\\d{7,8}";
var IE$1 = "(?:1\\d|[2569])\\d{6,8}|4\\d{6,9}|7\\d{8}|8\\d{8,9}";
var IM$1 = "1624\\d{6}|(?:[3578]\\d|90)\\d{8}";
var IL$1 = "1\\d{6}(?:\\d{3,5})?|[57]\\d{8}|[1-489]\\d{7}";
var IT$1 = "0\\d{5,10}|1\\d{8,10}|3(?:[0-8]\\d{7,10}|9\\d{7,8})|(?:43|55|70)\\d{8}|8\\d{5}(?:\\d{2,4})?";
var JM$1 = "(?:[58]\\d\\d|658|900)\\d{7}";
var JP$1 = "00[1-9]\\d{6,14}|[257-9]\\d{9}|(?:00|[1-9]\\d\\d)\\d{6}";
var JE$1 = "1534\\d{6}|(?:[3578]\\d|90)\\d{8}";
var JO$1 = "(?:(?:[2689]|7\\d)\\d|32|53)\\d{6}";
var KZ$1 = "(?:33622|8\\d{8})\\d{5}|[78]\\d{9}";
var KE$1 = "(?:[17]\\d\\d|900)\\d{6}|(?:2|80)0\\d{6,7}|[4-6]\\d{6,8}";
var KI$1 = "(?:[37]\\d|6[0-79])\\d{6}|(?:[2-48]\\d|50)\\d{3}";
var KP$1 = "85\\d{6}|(?:19\\d|[2-7])\\d{7}";
var KR$1 = "00[1-9]\\d{8,11}|(?:[12]|5\\d{3})\\d{7}|[13-6]\\d{9}|(?:[1-6]\\d|80)\\d{7}|[3-6]\\d{4,5}|(?:00|7)0\\d{8}";
var KW$1 = "18\\d{5}|(?:[2569]\\d|41)\\d{6}";
var KG$1 = "8\\d{9}|[235-9]\\d{8}";
var LA$1 = "[23]\\d{9}|3\\d{8}|(?:[235-8]\\d|41)\\d{6}";
var LV$1 = "(?:[268]\\d|90)\\d{6}";
var LB$1 = "[27-9]\\d{7}|[13-9]\\d{6}";
var LS$1 = "(?:[256]\\d\\d|800)\\d{5}";
var LR$1 = "(?:[245]\\d|33|77|88)\\d{7}|(?:2\\d|[4-6])\\d{6}";
var LY$1 = "[2-9]\\d{8}";
var LI$1 = "[68]\\d{8}|(?:[2378]\\d|90)\\d{5}";
var LT$1 = "(?:[3469]\\d|52|[78]0)\\d{6}";
var LU$1 = "35[013-9]\\d{4,8}|6\\d{8}|35\\d{2,4}|(?:[2457-9]\\d|3[0-46-9])\\d{2,9}";
var MO$1 = "0800\\d{3}|(?:28|[68]\\d)\\d{6}";
var MG$1 = "[23]\\d{8}";
var MW$1 = "(?:[1289]\\d|31|77)\\d{7}|1\\d{6}";
var MY$1 = "1\\d{8,9}|(?:3\\d|[4-9])\\d{7}";
var MV$1 = "(?:800|9[0-57-9]\\d)\\d{7}|[34679]\\d{6}";
var ML$1 = "[24-9]\\d{7}";
var MT$1 = "3550\\d{4}|(?:[2579]\\d\\d|800)\\d{5}";
var MH$1 = "329\\d{4}|(?:[256]\\d|45)\\d{5}";
var MQ$1 = "596\\d{6}|(?:69|80|9\\d)\\d{7}";
var MR$1 = "(?:[2-4]\\d\\d|800)\\d{5}";
var MU$1 = "(?:[57]|8\\d\\d)\\d{7}|[2-468]\\d{6}";
var YT$1 = "(?:80|9\\d)\\d{7}|(?:26|63)9\\d{6}";
var MX$1 = "[2-9]\\d{9}";
var FM$1 = "(?:[39]\\d\\d|820)\\d{4}";
var MD$1 = "(?:[235-7]\\d|[89]0)\\d{6}";
var MC$1 = "(?:[3489]|6\\d)\\d{7}";
var MN$1 = "[12]\\d{7,9}|[5-9]\\d{7}";
var ME$1 = "(?:20|[3-79]\\d)\\d{6}|80\\d{6,7}";
var MS$1 = "(?:[58]\\d\\d|664|900)\\d{7}";
var MA$1 = "[5-8]\\d{8}";
var MZ$1 = "(?:2|8\\d)\\d{7}";
var MM$1 = "1\\d{5,7}|95\\d{6}|(?:[4-7]|9[0-46-9])\\d{6,8}|(?:2|8\\d)\\d{5,8}";
var NA$1 = "[68]\\d{7,8}";
var NR$1 = "(?:444|(?:55|8\\d)\\d|666)\\d{4}";
var NP$1 = "(?:1\\d|9)\\d{9}|[1-9]\\d{7}";
var NL$1 = "(?:[124-7]\\d\\d|3(?:[02-9]\\d|1[0-8]))\\d{6}|8\\d{6,9}|9\\d{6,10}|1\\d{4,5}";
var NC$1 = "(?:050|[2-57-9]\\d\\d)\\d{3}";
var NZ$1 = "[1289]\\d{9}|50\\d{5}(?:\\d{2,3})?|[27-9]\\d{7,8}|(?:[34]\\d|6[0-35-9])\\d{6}|8\\d{4,6}";
var NI$1 = "(?:1800|[25-8]\\d{3})\\d{4}";
var NE$1 = "[027-9]\\d{7}";
var NG$1 = "2[0-24-9]\\d{8}|[78]\\d{10,13}|[7-9]\\d{9}|[1-9]\\d{7}|[124-7]\\d{6}";
var NU$1 = "(?:[4-7]|888\\d)\\d{3}";
var NF$1 = "[13]\\d{5}";
var MK$1 = "[2-578]\\d{7}";
var MP$1 = "[58]\\d{9}|(?:67|90)0\\d{7}";
var NO$1 = "(?:0|[2-9]\\d{3})\\d{4}";
var OM$1 = "(?:1505|[279]\\d{3}|500)\\d{4}|800\\d{5,6}";
var PK$1 = "122\\d{6}|[24-8]\\d{10,11}|9(?:[013-9]\\d{8,10}|2(?:[01]\\d\\d|2(?:[06-8]\\d|1[01]))\\d{7})|(?:[2-8]\\d{3}|92(?:[0-7]\\d|8[1-9]))\\d{6}|[24-9]\\d{8}|[89]\\d{7}";
var PW$1 = "(?:[24-8]\\d\\d|345|900)\\d{4}";
var PS$1 = "[2489]2\\d{6}|(?:1\\d|5)\\d{8}";
var PA$1 = "(?:00800|8\\d{3})\\d{6}|[68]\\d{7}|[1-57-9]\\d{6}";
var PG$1 = "(?:180|[78]\\d{3})\\d{4}|(?:[2-589]\\d|64)\\d{5}";
var PY$1 = "59\\d{4,6}|9\\d{5,10}|(?:[2-46-8]\\d|5[0-8])\\d{4,7}";
var PE$1 = "(?:[14-8]|9\\d)\\d{7}";
var PH$1 = "(?:[2-7]|9\\d)\\d{8}|2\\d{5}|(?:1800|8)\\d{7,9}";
var PN$1 = "";
var PL$1 = "(?:6|8\\d\\d)\\d{7}|[1-9]\\d{6}(?:\\d{2})?|[26]\\d{5}";
var PT$1 = "1693\\d{5}|(?:[26-9]\\d|30)\\d{7}";
var PR$1 = "(?:[589]\\d\\d|787)\\d{7}";
var QA$1 = "800\\d{4}|(?:2|800)\\d{6}|(?:0080|[3-7])\\d{7}";
var RE$1 = "(?:26|[689]\\d)\\d{7}";
var RO$1 = "(?:[236-8]\\d|90)\\d{7}|[23]\\d{5}";
var RU$1 = "8\\d{13}|[347-9]\\d{9}";
var RW$1 = "(?:06|[27]\\d\\d|[89]00)\\d{6}";
var BL$1 = "590\\d{6}|(?:69|80|9\\d)\\d{7}";
var SH$1 = "(?:[256]\\d|8)\\d{3}";
var KN$1 = "(?:[58]\\d\\d|900)\\d{7}";
var LC$1 = "(?:[58]\\d\\d|758|900)\\d{7}";
var MF$1 = "590\\d{6}|(?:69|80|9\\d)\\d{7}";
var PM$1 = "[45]\\d{5}|(?:708|80\\d)\\d{6}";
var VC$1 = "(?:[58]\\d\\d|784|900)\\d{7}";
var WS$1 = "(?:[2-6]|8\\d{5})\\d{4}|[78]\\d{6}|[68]\\d{5}";
var SM$1 = "(?:0549|[5-7]\\d)\\d{6}";
var ST$1 = "(?:22|9\\d)\\d{5}";
var SA$1 = "92\\d{7}|(?:[15]|8\\d)\\d{8}";
var SN$1 = "(?:[378]\\d|93)\\d{7}";
var RS$1 = "38[02-9]\\d{6,9}|6\\d{7,9}|90\\d{4,8}|38\\d{5,6}|(?:7\\d\\d|800)\\d{3,9}|(?:[12]\\d|3[0-79])\\d{5,10}";
var SC$1 = "800\\d{4}|(?:[249]\\d|64)\\d{5}";
var SL$1 = "(?:[237-9]\\d|66)\\d{6}";
var SG$1 = "(?:(?:1\\d|8)\\d\\d|7000)\\d{7}|[3689]\\d{7}";
var SX$1 = "7215\\d{6}|(?:[58]\\d\\d|900)\\d{7}";
var SK$1 = "[2-689]\\d{8}|[2-59]\\d{6}|[2-5]\\d{5}";
var SI$1 = "[1-7]\\d{7}|8\\d{4,7}|90\\d{4,6}";
var SB$1 = "[6-9]\\d{6}|[1-6]\\d{4}";
var SO$1 = "[346-9]\\d{8}|[12679]\\d{7}|[1-5]\\d{6}|[1348]\\d{5}";
var ZA$1 = "[1-79]\\d{8}|8\\d{4,9}";
var GS$1 = "";
var SS$1 = "[19]\\d{8}";
var ES$1 = "[5-9]\\d{8}";
var LK$1 = "[1-9]\\d{8}";
var SD$1 = "[19]\\d{8}";
var SR$1 = "(?:[2-5]|68|[78]\\d)\\d{5}";
var SJ$1 = "0\\d{4}|(?:[489]\\d|79)\\d{6}";
var SE$1 = "(?:[26]\\d\\d|9)\\d{9}|[1-9]\\d{8}|[1-689]\\d{7}|[1-4689]\\d{6}|2\\d{5}";
var CH$1 = "8\\d{11}|[2-9]\\d{8}";
var SY$1 = "[1-39]\\d{8}|[1-5]\\d{7}";
var TW$1 = "[2-689]\\d{8}|7\\d{9,10}|[2-8]\\d{7}|2\\d{6}";
var TJ$1 = "[0-57-9]\\d{8}";
var TZ$1 = "(?:[25-8]\\d|41|90)\\d{7}";
var TH$1 = "(?:001800|[2-57]|[689]\\d)\\d{7}|1\\d{7,9}";
var TL$1 = "7\\d{7}|(?:[2-47]\\d|[89]0)\\d{5}";
var TG$1 = "[279]\\d{7}";
var TK$1 = "[2-47]\\d{3,6}";
var TO$1 = "(?:0800|(?:[5-8]\\d\\d|999)\\d)\\d{3}|[2-8]\\d{4}";
var TT$1 = "(?:[58]\\d\\d|900)\\d{7}";
var TN$1 = "[2-57-9]\\d{7}";
var TR$1 = "4\\d{6}|8\\d{11,12}|(?:[2-58]\\d\\d|900)\\d{7}";
var TM$1 = "(?:[1-6]\\d|71)\\d{6}";
var TC$1 = "(?:[58]\\d\\d|649|900)\\d{7}";
var TV$1 = "(?:2|7\\d\\d|90)\\d{4}";
var UG$1 = "800\\d{6}|(?:[29]0|[347]\\d)\\d{7}";
var UA$1 = "[89]\\d{9}|[3-9]\\d{8}";
var AE$1 = "(?:[4-7]\\d|9[0-689])\\d{7}|800\\d{2,9}|[2-4679]\\d{7}";
var GB$1 = "[1-357-9]\\d{9}|[18]\\d{8}|8\\d{6}";
var UM$1 = "";
var US$1 = "[2-9]\\d{9}|3\\d{6}";
var UY$1 = "0004\\d{2,9}|[1249]\\d{7}|(?:[49]\\d|80)\\d{5}";
var UZ$1 = "(?:20|33|[5-79]\\d|88)\\d{7}";
var VU$1 = "[57-9]\\d{6}|(?:[238]\\d|48)\\d{3}";
var VE$1 = "[68]00\\d{7}|(?:[24]\\d|[59]0)\\d{8}";
var VN$1 = "[12]\\d{9}|[135-9]\\d{8}|[16]\\d{7}|[16-8]\\d{6}";
var VG$1 = "(?:284|[58]\\d\\d|900)\\d{7}";
var VI$1 = "[58]\\d{9}|(?:34|90)0\\d{7}";
var WF$1 = "(?:40|72)\\d{4}|8\\d{5}(?:\\d{3})?";
var EH$1 = "[5-8]\\d{8}";
var YE$1 = "(?:1|7\\d)\\d{7}|[1-7]\\d{6}";
var ZM$1 = "800\\d{6}|(?:21|63|[79]\\d)\\d{7}";
var ZW$1 = "2(?:[0-57-9]\\d{6,8}|6[0-24-9]\\d{6,7})|[38]\\d{9}|[35-8]\\d{8}|[3-6]\\d{7}|[1-689]\\d{6}|[1-3569]\\d{5}|[1356]\\d{4}";
var XK$1 = "2\\d{7,8}|3\\d{7,11}|(?:4\\d\\d|[89]00)\\d{5}";
var FW$1 = "^\\+590\\s\\d{2}\\s\\d{2}\\s\\d{2}\\s\\d{2}$";
var PHONE_REGEX_MAPPER = {
	AF: AF$1,
	AX: AX$1,
	AL: AL$1,
	DZ: DZ$1,
	AS: AS$1,
	AD: AD$1,
	AO: AO$1,
	AI: AI$1,
	AQ: AQ$1,
	AG: AG$1,
	AR: AR$1,
	AM: AM$1,
	AW: AW$1,
	AU: AU$1,
	AT: AT$1,
	AZ: AZ$1,
	BS: BS$1,
	BH: BH$1,
	BD: BD$1,
	BB: BB$1,
	BY: BY$1,
	BE: BE$1,
	BZ: BZ$1,
	BJ: BJ$1,
	BM: BM$1,
	BT: BT$1,
	BO: BO$1,
	BQ: BQ$1,
	BA: BA$1,
	BW: BW$1,
	BV: BV$1,
	BR: BR$1,
	IO: IO$1,
	BN: BN$1,
	BG: BG$1,
	BF: BF$1,
	BI: BI$1,
	CV: CV$1,
	KH: KH$1,
	CM: CM$1,
	CA: CA$1,
	KY: KY$1,
	CF: CF$1,
	TD: TD$1,
	CL: CL$1,
	CN: CN$1,
	CX: CX$1,
	CC: CC$1,
	CO: CO$1,
	KM: KM$1,
	CD: CD$1,
	CG: CG$1,
	CK: CK$1,
	CR: CR$1,
	CI: CI$1,
	HR: HR$1,
	CU: CU$1,
	CW: CW$1,
	CY: CY$1,
	CZ: CZ$1,
	DK: DK$1,
	DJ: DJ$1,
	DM: DM$1,
	DO: DO$1,
	EC: EC$1,
	EG: EG$1,
	SV: SV$1,
	GQ: GQ$1,
	ER: ER$1,
	EE: EE$1,
	SZ: SZ$1,
	ET: ET$1,
	FK: FK$1,
	FO: FO$1,
	FJ: FJ$1,
	FI: FI$1,
	FR: FR$1,
	GF: GF$1,
	PF: PF$1,
	TF: TF$1,
	GA: GA$1,
	GM: GM$1,
	GE: GE$1,
	DE: DE$1,
	GH: GH$1,
	GI: GI$1,
	GR: GR$1,
	GL: GL$1,
	GD: GD$1,
	GP: GP$1,
	GU: GU$1,
	GT: GT$1,
	GG: GG$1,
	GN: GN$1,
	GW: GW$1,
	GY: GY$1,
	HT: HT$1,
	HM: HM$1,
	VA: VA$1,
	HN: HN$1,
	HK: HK$1,
	HU: HU$1,
	IS: IS$1,
	IN: IN$1,
	ID: ID$1,
	IR: IR$1,
	IQ: IQ$1,
	IE: IE$1,
	IM: IM$1,
	IL: IL$1,
	IT: IT$1,
	JM: JM$1,
	JP: JP$1,
	JE: JE$1,
	JO: JO$1,
	KZ: KZ$1,
	KE: KE$1,
	KI: KI$1,
	KP: KP$1,
	KR: KR$1,
	KW: KW$1,
	KG: KG$1,
	LA: LA$1,
	LV: LV$1,
	LB: LB$1,
	LS: LS$1,
	LR: LR$1,
	LY: LY$1,
	LI: LI$1,
	LT: LT$1,
	LU: LU$1,
	MO: MO$1,
	MG: MG$1,
	MW: MW$1,
	MY: MY$1,
	MV: MV$1,
	ML: ML$1,
	MT: MT$1,
	MH: MH$1,
	MQ: MQ$1,
	MR: MR$1,
	MU: MU$1,
	YT: YT$1,
	MX: MX$1,
	FM: FM$1,
	MD: MD$1,
	MC: MC$1,
	MN: MN$1,
	ME: ME$1,
	MS: MS$1,
	MA: MA$1,
	MZ: MZ$1,
	MM: MM$1,
	NA: NA$1,
	NR: NR$1,
	NP: NP$1,
	NL: NL$1,
	NC: NC$1,
	NZ: NZ$1,
	NI: NI$1,
	NE: NE$1,
	NG: NG$1,
	NU: NU$1,
	NF: NF$1,
	MK: MK$1,
	MP: MP$1,
	NO: NO$1,
	OM: OM$1,
	PK: PK$1,
	PW: PW$1,
	PS: PS$1,
	PA: PA$1,
	PG: PG$1,
	PY: PY$1,
	PE: PE$1,
	PH: PH$1,
	PN: PN$1,
	PL: PL$1,
	PT: PT$1,
	PR: PR$1,
	QA: QA$1,
	RE: RE$1,
	RO: RO$1,
	RU: RU$1,
	RW: RW$1,
	BL: BL$1,
	SH: SH$1,
	KN: KN$1,
	LC: LC$1,
	MF: MF$1,
	PM: PM$1,
	VC: VC$1,
	WS: WS$1,
	SM: SM$1,
	ST: ST$1,
	SA: SA$1,
	SN: SN$1,
	RS: RS$1,
	SC: SC$1,
	SL: SL$1,
	SG: SG$1,
	SX: SX$1,
	SK: SK$1,
	SI: SI$1,
	SB: SB$1,
	SO: SO$1,
	ZA: ZA$1,
	GS: GS$1,
	SS: SS$1,
	ES: ES$1,
	LK: LK$1,
	SD: SD$1,
	SR: SR$1,
	SJ: SJ$1,
	SE: SE$1,
	CH: CH$1,
	SY: SY$1,
	TW: TW$1,
	TJ: TJ$1,
	TZ: TZ$1,
	TH: TH$1,
	TL: TL$1,
	TG: TG$1,
	TK: TK$1,
	TO: TO$1,
	TT: TT$1,
	TN: TN$1,
	TR: TR$1,
	TM: TM$1,
	TC: TC$1,
	TV: TV$1,
	UG: UG$1,
	UA: UA$1,
	AE: AE$1,
	GB: GB$1,
	UM: UM$1,
	US: US$1,
	UY: UY$1,
	UZ: UZ$1,
	VU: VU$1,
	VE: VE$1,
	VN: VN$1,
	VG: VG$1,
	VI: VI$1,
	WF: WF$1,
	EH: EH$1,
	YE: YE$1,
	ZM: ZM$1,
	ZW: ZW$1,
	XK: XK$1,
	FW: FW$1,
	"YT-UNF": "^(?:\\+262)?\\d{9}$",
	"BQ-BO": "",
	"BQ-SA": "",
	"BQ-SE": "",
	"GB-ENG": "",
	"GB-NIR": "",
	"GB-SCT": "",
	"GB-UKM": "",
	"GB-WLS": ""
};

var dial_code_to_country = {
	"1": [
		"US",
		"AG",
		"AI",
		"AS",
		"BB",
		"BM",
		"BS",
		"CA",
		"DM",
		"DO",
		"GD",
		"GU",
		"JM",
		"KN",
		"KY",
		"LC",
		"MP",
		"MS",
		"PR",
		"TC",
		"TT",
		"VC",
		"VG",
		"VI"
	],
	"7": [
		"RU",
		"KZ"
	],
	"20": [
		"EG"
	],
	"27": [
		"ZA"
	],
	"30": [
		"GR"
	],
	"31": [
		"NL"
	],
	"32": [
		"BE"
	],
	"33": [
		"FR"
	],
	"34": [
		"ES"
	],
	"36": [
		"HU"
	],
	"39": [
		"IT",
		"VA"
	],
	"40": [
		"RO"
	],
	"41": [
		"CH"
	],
	"43": [
		"AT"
	],
	"44": [
		"GB",
		"GB-ENG",
		"GB-NIR",
		"GB-SCT",
		"GB-UKM",
		"GB-WLS"
	],
	"45": [
		"DK"
	],
	"46": [
		"SE"
	],
	"47": [
		"NO"
	],
	"48": [
		"PL"
	],
	"49": [
		"DE"
	],
	"51": [
		"PE"
	],
	"52": [
		"MX"
	],
	"53": [
		"CU"
	],
	"54": [
		"AR"
	],
	"55": [
		"BR"
	],
	"56": [
		"CL"
	],
	"57": [
		"CO"
	],
	"58": [
		"VE"
	],
	"60": [
		"MY"
	],
	"61": [
		"AU"
	],
	"62": [
		"ID"
	],
	"63": [
		"PH"
	],
	"64": [
		"NZ"
	],
	"65": [
		"SG"
	],
	"66": [
		"TH"
	],
	"81": [
		"JP"
	],
	"82": [
		"KR"
	],
	"84": [
		"VN"
	],
	"86": [
		"CN"
	],
	"90": [
		"TR"
	],
	"91": [
		"IN"
	],
	"92": [
		"PK"
	],
	"93": [
		"AF"
	],
	"94": [
		"LK"
	],
	"95": [
		"MM"
	],
	"98": [
		"IR"
	],
	"211": [
		"SS"
	],
	"212": [
		"MA"
	],
	"213": [
		"DZ"
	],
	"216": [
		"TN"
	],
	"218": [
		"LY"
	],
	"220": [
		"GM"
	],
	"221": [
		"SN"
	],
	"222": [
		"MR"
	],
	"223": [
		"ML"
	],
	"224": [
		"GN"
	],
	"225": [
		"CI"
	],
	"226": [
		"BF"
	],
	"227": [
		"NE"
	],
	"228": [
		"TG"
	],
	"229": [
		"BJ"
	],
	"230": [
		"MU"
	],
	"231": [
		"LR"
	],
	"232": [
		"SL"
	],
	"233": [
		"GH"
	],
	"234": [
		"NG"
	],
	"235": [
		"TD"
	],
	"236": [
		"CF"
	],
	"237": [
		"CM"
	],
	"238": [
		"CV"
	],
	"239": [
		"ST"
	],
	"240": [
		"GQ"
	],
	"241": [
		"GA"
	],
	"242": [
		"CG"
	],
	"243": [
		"CD"
	],
	"244": [
		"AO"
	],
	"245": [
		"GW"
	],
	"248": [
		"SC"
	],
	"249": [
		"SD"
	],
	"250": [
		"RW"
	],
	"251": [
		"ET"
	],
	"252": [
		"SO"
	],
	"253": [
		"DJ"
	],
	"254": [
		"KE"
	],
	"255": [
		"TZ"
	],
	"256": [
		"UG"
	],
	"257": [
		"BI"
	],
	"258": [
		"MZ"
	],
	"260": [
		"ZM"
	],
	"261": [
		"MG"
	],
	"262": [
		"RE",
		"YT",
		"YT-UNF"
	],
	"263": [
		"ZW"
	],
	"264": [
		"NA"
	],
	"265": [
		"MW"
	],
	"266": [
		"LS"
	],
	"267": [
		"BW"
	],
	"268": [
		"SZ"
	],
	"269": [
		"KM"
	],
	"290": [
		"SH"
	],
	"291": [
		"ER"
	],
	"297": [
		"AW"
	],
	"298": [
		"FO"
	],
	"299": [
		"GL"
	],
	"350": [
		"GI"
	],
	"351": [
		"PT"
	],
	"352": [
		"LU"
	],
	"353": [
		"IE"
	],
	"354": [
		"IS"
	],
	"355": [
		"AL"
	],
	"356": [
		"MT"
	],
	"357": [
		"CY"
	],
	"358": [
		"FI"
	],
	"359": [
		"BG"
	],
	"370": [
		"LT"
	],
	"371": [
		"LV"
	],
	"372": [
		"EE"
	],
	"373": [
		"MD"
	],
	"374": [
		"AM"
	],
	"375": [
		"BY"
	],
	"376": [
		"AD"
	],
	"377": [
		"MC"
	],
	"378": [
		"SM"
	],
	"380": [
		"UA"
	],
	"381": [
		"RS"
	],
	"382": [
		"ME"
	],
	"383": [
		"XK"
	],
	"385": [
		"HR"
	],
	"386": [
		"SI"
	],
	"387": [
		"BA"
	],
	"389": [
		"MK"
	],
	"420": [
		"CZ"
	],
	"421": [
		"SK"
	],
	"423": [
		"LI"
	],
	"500": [
		"FK"
	],
	"501": [
		"BZ"
	],
	"502": [
		"GT"
	],
	"503": [
		"SV"
	],
	"504": [
		"HN"
	],
	"505": [
		"NI"
	],
	"506": [
		"CR"
	],
	"507": [
		"PA"
	],
	"509": [
		"HT"
	],
	"590": [
		"MF",
		"FW"
	],
	"591": [
		"BO"
	],
	"592": [
		"GY"
	],
	"593": [
		"EC"
	],
	"594": [
		"GF"
	],
	"595": [
		"PY"
	],
	"597": [
		"SR"
	],
	"598": [
		"UY"
	],
	"599": [
		"CW",
		"BQ",
		"BQ-BO",
		"BQ-SA",
		"BQ-SE"
	],
	"670": [
		"TL"
	],
	"673": [
		"BN"
	],
	"674": [
		"NR"
	],
	"675": [
		"PG"
	],
	"676": [
		"TO"
	],
	"677": [
		"SB"
	],
	"678": [
		"VU"
	],
	"679": [
		"FJ"
	],
	"680": [
		"PW"
	],
	"682": [
		"CK"
	],
	"683": [
		"NU"
	],
	"685": [
		"WS"
	],
	"686": [
		"KI"
	],
	"687": [
		"NC"
	],
	"688": [
		"TV"
	],
	"689": [
		"PF"
	],
	"691": [
		"FM"
	],
	"692": [
		"MH"
	],
	"850": [
		"KP"
	],
	"852": [
		"HK"
	],
	"853": [
		"MO"
	],
	"855": [
		"KH"
	],
	"856": [
		"LA"
	],
	"880": [
		"BD"
	],
	"886": [
		"TW"
	],
	"960": [
		"MV"
	],
	"961": [
		"LB"
	],
	"962": [
		"JO"
	],
	"963": [
		"SY"
	],
	"964": [
		"IQ"
	],
	"965": [
		"KW"
	],
	"966": [
		"SA"
	],
	"967": [
		"YE"
	],
	"968": [
		"OM"
	],
	"970": [
		"PS"
	],
	"971": [
		"AE"
	],
	"972": [
		"IL"
	],
	"973": [
		"BH"
	],
	"974": [
		"QA"
	],
	"975": [
		"BT"
	],
	"976": [
		"MN"
	],
	"977": [
		"NP"
	],
	"992": [
		"TJ"
	],
	"993": [
		"TM"
	],
	"994": [
		"AZ"
	],
	"995": [
		"GE"
	],
	"996": [
		"KG"
	],
	"998": [
		"UZ"
	]
};
var DIAL_CODE_MAPPER = {
	dial_code_to_country: dial_code_to_country
};

/**
 * Determines the country data (countryCode, dialCode) based on the provided phone number.
 * This function employs a multi-step approach to identify the country code:
 * - If the phone number starts with '+', it extracts the numeric characters
 *   and matches the leading digits with known dial codes mapped to countries.
 * - For matched dial codes, it further filters based on country-specific regex patterns
 *   to validate the phone number format for those countries.
 * - If the phone number doesn't start with '+', it returns empty strings as dialCode and countryCode
 *
 * @param phoneNumber The input phone number (string or number).
 * @returns The detected countryCode & dialCode or an empty strings in both if not found.
 */
const detectCountryAndDialCodeFromPhone = (phoneNumber) => {
    const regexMapper = PHONE_REGEX_MAPPER;
    // If the phone number starts with '+', extract numeric characters
    if (phoneNumber.toString().charAt(0) === '+') {
        const cleanedPhoneNumberWithoutPlusPrefix = phoneNumber
            .toString()
            .replace(/\D/g, '');
        const matchingCountries = [];
        const dialCodeMap = DIAL_CODE_MAPPER.dial_code_to_country;
        // Iterate through dial codes and check for matches with cleaned phone number
        for (const code in dialCodeMap) {
            if (cleanedPhoneNumberWithoutPlusPrefix.startsWith(code)) {
                matchingCountries.push(...dialCodeMap[code].map((item) => ({
                    countryCode: item,
                    dialCode: `+${code}`,
                })));
            }
        }
        // Filter matching countries based on phone number validation regex
        const matchedCountryCode = matchingCountries.find((country) => {
            const phoneNumberWithoutDialCode = String(phoneNumber).replace(country.dialCode, '');
            const regex = regexMapper[country.countryCode];
            if (regex &&
                matchesEntirely(phoneNumberWithoutDialCode, regex))
                return country;
            return undefined;
        });
        // Return the first matched country code, if any
        return (matchedCountryCode || {
            countryCode: '',
            dialCode: '',
        });
    }
    // Return empty string if no country code is detected
    return { countryCode: '', dialCode: '' };
};
const getPhoneNumberWithoutDialCode = (phoneNumber) => {
    const cleanedPhoneNumber = cleanPhoneNumber(String(phoneNumber));
    const { dialCode } = detectCountryAndDialCodeFromPhone(cleanedPhoneNumber);
    return String(cleanedPhoneNumber).replace(dialCode, '');
};
const cleanPhoneNumber = (phoneNumber) => {
    // Regular expression to match all characters except numbers and + sign at the start
    const regex = /[^0-9+]|(?!A)\+/g;
    // Replace matched characters with an empty string
    const cleanedPhoneNumber = phoneNumber.replace(regex, '');
    return phoneNumber[0] === '+' ? `+${cleanedPhoneNumber}` : cleanedPhoneNumber;
};
/**
 * Replaces the first `n` occurrences of 'x' in a source string with the first `n` characters from a replacement string.
 *
 * @param source {string} - The original string where replacements are to be made.
 * @param replacement {string} - The string from which replacement characters are taken.
 * @param n {number} - The number of 'x' characters to replace (unmasked digit count).
 * @returns {string} - The modified string after replacements.
 */
const suffixMasking = (source, replacement, n) => {
    // Convert the source string into an array of characters for easy manipulation
    const result = source.split('');
    let replaceIndex = 0;
    let replacementsDone = 0;
    // Iterate over the result array to replace 'x' with characters from the replacement string
    for (let i = 0; i < result.length && replacementsDone < n; i++) {
        if (result[i] === 'x' && replaceIndex < replacement.length) {
            result[i] = replacement[replaceIndex++];
            replacementsDone++;
        }
    }
    // Join the array back into a string and return the modified result
    return result.join('');
};
/**
 * Replaces the last `n` occurrences of 'x' in a source string with the last `n` characters from a replacement string.
 *
 * @param source {string} - The original string where replacements are to be made.
 * @param replacement {string} - The string from which replacement characters are taken.
 * @param n {number} - The number of 'x' characters to replace from the end of the source string  (unmasked digit count).
 * @returns {string} - The modified string after replacements.
 */
const prefixMasking = (source, replacement, n) => {
    // Convert the source string into an array of characters for easy manipulation
    const result = source.split('');
    let replaceIndex = replacement.length - 1;
    let replacementsDone = 0;
    // Iterate from the end of the source string
    for (let i = result.length - 1; i >= 0 && replacementsDone < n; i--) {
        if (result[i] === 'x' && replaceIndex >= 0) {
            result[i] = replacement[replaceIndex--];
            replacementsDone++;
        }
    }
    // Join the array back into a string and return the modified result
    return result.join('');
};
/**
 * Replaces every alternate digit of phone number with 'x' in phoneNumberWithoutDialCode.
 *
 * @param phoneNumberWithoutDialCode {number | string} - The original phone number without dial code where replacements are to be made.
 * @returns {string} - The modified string after replacements.
 */
const alternateMasking = (phoneNumberWithoutDialCode) => {
    return String(phoneNumberWithoutDialCode)
        .trim()
        .split('')
        .reduce((acc, char) => {
        if (/\d/.test(char)) {
            acc.numericCount % 2 !== 0
                ? acc.result.push('x')
                : acc.result.push(char);
            acc.numericCount++;
        }
        return acc;
    }, { result: [], numericCount: 0 })
        .result.join('');
};
const matchesEntirely = (text, regular_expression) => {
    text = text || '';
    return new RegExp('^(?:' + regular_expression + ')$').test(text);
};

// Validates whether a given phone number is valid based on the provided country code or auto-detects the country code and checks if the number matches the defined regex pattern for that country.
const isValidPhoneNumber = (phoneNumber, countryCode) => {
    // Clean the provided phoneNumber by removing non-numeric characters
    const cleanedPhoneNumber = cleanPhoneNumber(phoneNumber.toString());
    if (!cleanedPhoneNumber)
        return false;
    const regexMapper = PHONE_REGEX_MAPPER;
    const phoneInfo = detectCountryAndDialCodeFromPhone(cleanedPhoneNumber);
    // Detect or validate the country code
    countryCode = (countryCode && countryCode in regexMapper
        ? countryCode
        : phoneInfo.countryCode);
    // Return false if phoneNumber is empty
    if (!phoneNumber)
        return false;
    // Check if the countryCode exists in the PHONE_REGEX_MAPPER
    if (countryCode in regexMapper) {
        const phoneNumberWithoutDialCode = getPhoneNumberWithoutDialCode(cleanedPhoneNumber);
        // Fetch the regex pattern for the countryCode
        const regex = regexMapper[countryCode];
        // Test if the cleanedPhoneNumber matches the regex pattern
        return matchesEntirely(phoneNumberWithoutDialCode, regex);
    }
    // Return false if the countryCode is not supported
    return false;
};
var isValidPhoneNumber$1 = withErrorBoundary(isValidPhoneNumber);

var AF = "xx xxx xxxx";
var AX = "xxx xxx";
var AL = "xxx xx xxxx";
var DZ = "xxxx-xxxx-xxx";
var AS = "xxx-xxxx";
var AD = "xxx xxx";
var AO = "xx xxx xxxx";
var AI = "xxx-xxxx";
var AQ = "";
var AG = "xxx-xxxx";
var AR = "xxxx-xxxx";
var AM = "xx xx xx xx";
var AW = "xxx-xxxx";
var AU = "xxx xxx xxx";
var AT = "xxx xxxxxxxx";
var AZ = "xx xxx xx xx";
var BS = "xxx-xxxx";
var BH = "xxxx xxxx";
var BD = "xxxx-xxxxxx";
var BB = "xxx-xxxx";
var BY = "xx xxx-xx-xx";
var BE = "xxx xx xx xx";
var BZ = "xxx-xxxx";
var BJ = "xx xx xx xx";
var BM = "xxx-xxxx";
var BT = "x xxx xxx";
var BO = "xxxx-xxxx";
var BQ = "xxx xxxx";
var BA = "xx xxx-xxxx";
var BW = "xx xxxx xxxx";
var BV = "";
var BR = "xx xxxx-xxxx";
var IO = "xxx xxxx";
var BN = "xxxx-xxxx";
var BG = "xx xxx xxxx";
var BF = "xx xx xx xx";
var BI = "xx xx xx xx";
var CV = "xxx xxxx";
var KH = "xxx-xxx-xxx";
var CM = "xx xx xx xx";
var CA = "xxx-xxx-xxxx";
var KY = "xxx-xxxx";
var CF = "xx xx xx xx";
var TD = "xx xx xx xx";
var CL = "x xxxx xxxx";
var CN = "xxxx-xxxxxxx";
var CX = "xxx xxxx xxxx";
var CC = "xxx xxxx xxxx";
var CO = "xxxx-xxxxxxx";
var KM = "xx xx xx xx";
var CD = "xx xxx xxxx";
var CG = "xx xx xx xx";
var CK = "xx xxx";
var CR = "xxxx-xxxx";
var CI = "xx xx xx xx";
var HR = "xxx xxx xxxx";
var CU = "xxxx-xxxx";
var CW = "xxx xxxx";
var CY = "xx xxxxxx";
var CZ = "xxx xxx xxx";
var DK = "xx xx xx xx";
var DJ = "xx xx xx xx";
var DM = "xxx-xxxx";
var DO = "xxx-xxxxxxx";
var EC = "xx xxx xxxx";
var EG = "xx xxx xxxx";
var SV = "xxxx-xxxx";
var GQ = "xx xxx xxxx";
var ER = "x xxx xxxx";
var EE = "xxx xxxx";
var SZ = "xxx xx xxxx";
var ET = "xx xxx xxxx";
var FK = "xxxxx";
var FO = "xxx xxx";
var FJ = "xxxx xxxx";
var FI = "xx xxx xxxx";
var FR = "xx xx xx xx xx";
var GF = "xxx xx xx xx";
var PF = "xx xx xx xx";
var TF = "";
var GA = "xx xx xx xx";
var GM = "xxxx-xxxx";
var GE = "xxx xxx xxx";
var DE = "xxx xxxxxxxx";
var GH = "xxx xxx xxxx";
var GI = "xxxx xxxx";
var GR = "xx xxx xxxx";
var GL = "xx xx xx";
var GD = "xxx-xxxx";
var GP = "xxx xx xx xx";
var GU = "xxx-xxxx";
var GT = "xxxx-xxxx";
var GG = "xxxx xxxx";
var GN = "xx xx xx xx";
var GW = "xx xx xx xx";
var GY = "xxx-xxxx";
var HT = "xxx-xxxx";
var HM = "";
var VA = "xxx xxxx xxxx";
var HN = "xxxx-xxxx";
var HK = "xxxx xxxx";
var HU = "xxx xxx xxxx";
var IS = "xxx xxxx";
var IN = "xxxx xxxxxx";
var ID = "xxxx-xxxx-xxxx";
var IR = "xx xxxx xxxx";
var IQ = "xx xxx xxxx";
var IE = "xx xxx xxxx";
var IM = "xxxx xxxx";
var IL = "xxxx-xxx-xxx";
var IT = "xxx xxxx xxxx";
var JM = "xxx-xxxx";
var JP = "xx xxxx xxxx";
var JE = "xxxx xxxx";
var JO = "xx xxxx xxxx";
var KZ = "xxx-xxx-xx-xx";
var KE = "xxx xxxxxx";
var KI = "xx xxx";
var KP = "xx xxx xxxx";
var KR = "xx xxxx xxxx";
var KW = "xxx xx xxxx";
var KG = "xxx-xx-xx-xx";
var LA = "xxx xx xxxx";
var LV = "xxxx xxxx";
var LB = "xx xxx xxx";
var LS = "xxx xx xxxx";
var LR = "xxx-xxx-xxxx";
var LY = "xx xxxxx xxxx";
var LI = "xxx xx xx";
var LT = "xxx xxxxx";
var LU = "xxx xx xxx";
var MO = "xxxx xxxx";
var MG = "xx xx xx xx xx";
var MW = "xx xxxx xxxx";
var MY = "xx xxxxx xx";
var MV = "xxxxxx";
var ML = "xx xx xx xx";
var MT = "xx xx xx xx";
var MH = "xxx xxxx";
var MQ = "xxx xx xx xx";
var MR = "xx xx xx xx";
var MU = "xx xxxx xxxx";
var YT = "xxx xx xx xx";
var MX = "xxx-xxx-xxxx";
var FM = "xxx xxxx";
var MD = "xx xxxxxx";
var MC = "xx xx xx xx";
var MN = "xxx-xx-xxxx";
var ME = "xx xxxxxx";
var MS = "xxx-xxxx";
var MA = "xxxx-xxxxxx";
var MZ = "xx xxxxxxx";
var MM = "xx xxxxxx";
var NA = "xx xxxx xxxx";
var NR = "xxx xxxx";
var NP = "xxxx-xxxxxxx";
var NL = "xxx-xxxxxxx";
var NC = "xx xx xx";
var NZ = "xxx-xxxxxxx";
var NI = "xxxx-xxxx";
var NE = "xx xx xx xx";
var NG = "xxx xxx xxxx";
var NU = "xxxx";
var NF = "x xxxx";
var MK = "xx xx xx xx";
var MP = "xxx-xxxx";
var NO = "xxxx xxxx";
var OM = "xxxx-xxxx";
var PK = "xxx-xxxxxxx";
var PW = "xxx xxxx";
var PS = "xxxx-xxxxxxx";
var PA = "xxx-xxxx";
var PG = "xxx-xxxxxx";
var PY = "xxx-xxxxxx";
var PE = "xxx-xxx-xxx";
var PH = "xxx-xxxx";
var PN = "";
var PL = "xxx xxx xxx";
var PT = "xxx xxx xxx";
var PR = "xxx-xxx-xxxx";
var QA = "xxxx xxxx";
var RE = "xxx xx xx xx";
var RO = "xxx xxx xxxx";
var RU = "xxx xxx-xx-xx";
var RW = "xxx xxxxxx";
var BL = "xxx xx xx xx";
var SH = "xxxx";
var KN = "xxx-xxxx";
var LC = "xxx-xxxx";
var MF = "xxx xx xx xx";
var PM = "xxx xxxx";
var VC = "xxx-xxxx";
var WS = "xx xxxxx";
var SM = "xxxxx xxxxx";
var ST = "xx xxx xx";
var SA = "xxx-xxxxxxx";
var SN = "xx xxx xx xx";
var RS = "xxx xxxxx";
var SC = "xx xxxxx";
var SL = "xxx-xxxxxx";
var SG = "xxxx xxxx";
var SX = "xxx-xxxx";
var SK = "xxx xxx xxx";
var SI = "xx xxxxxx";
var SB = "xxxxx";
var SO = "xxx xxxxxxx";
var ZA = "xxx-xxx-xxxx";
var GS = "";
var SS = "xxx xxxx xxx";
var ES = "xxx xxx xxx";
var LK = "xx xxx xxxx";
var SD = "xx xxx xxxx";
var SR = "xxx-xxxx";
var SJ = "xxx xx xxx";
var SE = "xxx-xxx xx xx";
var CH = "xxx xxx xxx";
var SY = "xx xxxx xxxx";
var TW = "xxxx-xxxxxx";
var TJ = "xxx xx xx xx";
var TZ = "xxx xxx xxxx";
var TH = "xxx-xxxxxxx";
var TL = "xxx-xxxxxxx";
var TG = "xx xx xx xx";
var TK = "xxxx";
var TO = "xxxxx";
var TT = "xxx-xxxx";
var TN = "xx xxxxxx";
var TR = "xxx xxx xx xx";
var TM = "x xxx xxx";
var TC = "xxx-xxxx";
var TV = "xxxxx";
var UG = "xxx xxxxxxx";
var UA = "xx xxx xx xx";
var AE = "xx xxx xxxx";
var GB = "xxxx xxx xxx";
var UM = "";
var US = "xxx-xxx-xxxx";
var UY = "xxx-xxxxx";
var UZ = "xxx-xxx-xx-xx";
var VU = "xx xxxxx";
var VE = "xxxx-xxx-xxxx";
var VN = "xxxx-xxxxxxx";
var VG = "xxx-xxxx";
var VI = "xxx-xxxx";
var WF = "xx xxxx";
var EH = "xx xx xx xx";
var YE = "xxxx-xxxx";
var ZM = "xxx-xxxxxxx";
var ZW = "xx xxx xxxx";
var XK = "xxx xxx xxx";
var FW = "xxx xx xx xx";
var PHONE_FORMATTER_MAPPER = {
	AF: AF,
	AX: AX,
	AL: AL,
	DZ: DZ,
	AS: AS,
	AD: AD,
	AO: AO,
	AI: AI,
	AQ: AQ,
	AG: AG,
	AR: AR,
	AM: AM,
	AW: AW,
	AU: AU,
	AT: AT,
	AZ: AZ,
	BS: BS,
	BH: BH,
	BD: BD,
	BB: BB,
	BY: BY,
	BE: BE,
	BZ: BZ,
	BJ: BJ,
	BM: BM,
	BT: BT,
	BO: BO,
	BQ: BQ,
	BA: BA,
	BW: BW,
	BV: BV,
	BR: BR,
	IO: IO,
	BN: BN,
	BG: BG,
	BF: BF,
	BI: BI,
	CV: CV,
	KH: KH,
	CM: CM,
	CA: CA,
	KY: KY,
	CF: CF,
	TD: TD,
	CL: CL,
	CN: CN,
	CX: CX,
	CC: CC,
	CO: CO,
	KM: KM,
	CD: CD,
	CG: CG,
	CK: CK,
	CR: CR,
	CI: CI,
	HR: HR,
	CU: CU,
	CW: CW,
	CY: CY,
	CZ: CZ,
	DK: DK,
	DJ: DJ,
	DM: DM,
	DO: DO,
	EC: EC,
	EG: EG,
	SV: SV,
	GQ: GQ,
	ER: ER,
	EE: EE,
	SZ: SZ,
	ET: ET,
	FK: FK,
	FO: FO,
	FJ: FJ,
	FI: FI,
	FR: FR,
	GF: GF,
	PF: PF,
	TF: TF,
	GA: GA,
	GM: GM,
	GE: GE,
	DE: DE,
	GH: GH,
	GI: GI,
	GR: GR,
	GL: GL,
	GD: GD,
	GP: GP,
	GU: GU,
	GT: GT,
	GG: GG,
	GN: GN,
	GW: GW,
	GY: GY,
	HT: HT,
	HM: HM,
	VA: VA,
	HN: HN,
	HK: HK,
	HU: HU,
	IS: IS,
	IN: IN,
	ID: ID,
	IR: IR,
	IQ: IQ,
	IE: IE,
	IM: IM,
	IL: IL,
	IT: IT,
	JM: JM,
	JP: JP,
	JE: JE,
	JO: JO,
	KZ: KZ,
	KE: KE,
	KI: KI,
	KP: KP,
	KR: KR,
	KW: KW,
	KG: KG,
	LA: LA,
	LV: LV,
	LB: LB,
	LS: LS,
	LR: LR,
	LY: LY,
	LI: LI,
	LT: LT,
	LU: LU,
	MO: MO,
	MG: MG,
	MW: MW,
	MY: MY,
	MV: MV,
	ML: ML,
	MT: MT,
	MH: MH,
	MQ: MQ,
	MR: MR,
	MU: MU,
	YT: YT,
	MX: MX,
	FM: FM,
	MD: MD,
	MC: MC,
	MN: MN,
	ME: ME,
	MS: MS,
	MA: MA,
	MZ: MZ,
	MM: MM,
	NA: NA,
	NR: NR,
	NP: NP,
	NL: NL,
	NC: NC,
	NZ: NZ,
	NI: NI,
	NE: NE,
	NG: NG,
	NU: NU,
	NF: NF,
	MK: MK,
	MP: MP,
	NO: NO,
	OM: OM,
	PK: PK,
	PW: PW,
	PS: PS,
	PA: PA,
	PG: PG,
	PY: PY,
	PE: PE,
	PH: PH,
	PN: PN,
	PL: PL,
	PT: PT,
	PR: PR,
	QA: QA,
	RE: RE,
	RO: RO,
	RU: RU,
	RW: RW,
	BL: BL,
	SH: SH,
	KN: KN,
	LC: LC,
	MF: MF,
	PM: PM,
	VC: VC,
	WS: WS,
	SM: SM,
	ST: ST,
	SA: SA,
	SN: SN,
	RS: RS,
	SC: SC,
	SL: SL,
	SG: SG,
	SX: SX,
	SK: SK,
	SI: SI,
	SB: SB,
	SO: SO,
	ZA: ZA,
	GS: GS,
	SS: SS,
	ES: ES,
	LK: LK,
	SD: SD,
	SR: SR,
	SJ: SJ,
	SE: SE,
	CH: CH,
	SY: SY,
	TW: TW,
	TJ: TJ,
	TZ: TZ,
	TH: TH,
	TL: TL,
	TG: TG,
	TK: TK,
	TO: TO,
	TT: TT,
	TN: TN,
	TR: TR,
	TM: TM,
	TC: TC,
	TV: TV,
	UG: UG,
	UA: UA,
	AE: AE,
	GB: GB,
	UM: UM,
	US: US,
	UY: UY,
	UZ: UZ,
	VU: VU,
	VE: VE,
	VN: VN,
	VG: VG,
	VI: VI,
	WF: WF,
	EH: EH,
	YE: YE,
	ZM: ZM,
	ZW: ZW,
	XK: XK,
	FW: FW,
	"YT-UNF": "xxx xx xx xx",
	"BQ-BO": "",
	"BQ-SA": "",
	"BQ-SE": "",
	"GB-ENG": "",
	"GB-NIR": "",
	"GB-SCT": "",
	"GB-UKM": "",
	"GB-WLS": ""
};

// Formats a provided phone number according to the predefined format for a specific country code, or auto-detects the country code and formats the number accordingly.
const formatPhoneNumber = (phoneNumber, countryCode) => {
    // Throw errors if phoneNumber is invalid
    if (!phoneNumber)
        throw new Error(`Parameter 'phoneNumber' is invalid! The received value was: ${phoneNumber}. Please ensure you provide a valid phone number.`);
    // Convert phoneNumber to string and clean it by removing non-numeric characters
    phoneNumber = phoneNumber.toString();
    phoneNumber = cleanPhoneNumber(phoneNumber);
    const formatterMap = PHONE_FORMATTER_MAPPER;
    // Detect or validate the country code
    countryCode = (countryCode && countryCode in formatterMap
        ? countryCode
        : detectCountryAndDialCodeFromPhone(phoneNumber).countryCode);
    // Fetch the pattern for the countryCode from the PHONE_FORMATTER_MAPPER
    const pattern = formatterMap[countryCode];
    if (!pattern)
        return phoneNumber;
    // Count the number of 'x' characters in the format pattern
    let charCountInFormatterPattern = 0;
    for (let i = 0; i < pattern.length; i++) {
        if (pattern[i] === 'x') {
            charCountInFormatterPattern++;
        }
    }
    // Calculate the difference between phoneNumber length and 'x' characters count in pattern
    const diff = phoneNumber.length - charCountInFormatterPattern;
    // Extract the phoneNumber without the prefix
    const phoneNumberWithoutPrefix = phoneNumber.slice(diff);
    const formattedNumber = [];
    let numberIndex = 0;
    // Loop through the pattern to format the phoneNumber
    for (let i = 0; i < pattern.length; i++) {
        const patternChar = pattern[i];
        if (patternChar === 'x') {
            // Insert phoneNumber digits at 'x' positions
            if (numberIndex < phoneNumberWithoutPrefix.length) {
                formattedNumber.push(phoneNumberWithoutPrefix[numberIndex]);
                numberIndex++;
            }
        }
        else {
            // Insert non-digit characters from the pattern
            formattedNumber.push(patternChar);
        }
    }
    // Join the formattedNumber array to create the formattedPhoneNumber without prefix
    const formattedPhoneNumberWithoutPrefix = formattedNumber.join('');
    // Combine the prefix and formattedPhoneNumberWithoutPrefix
    const formattedPhoneNumberWithPrefix = phoneNumber.slice(0, diff) + ' ' + formattedPhoneNumberWithoutPrefix;
    // Return the formattedPhoneNumber with prefix after trimming whitespace
    return formattedPhoneNumberWithPrefix.trim();
};
var formatPhoneNumber$1 = withErrorBoundary(formatPhoneNumber);

// Parses a given phone number, identifies its country code (if not provided), and returns an object with details including the country code, formatted phone number, dial code, and format template.
const parsePhoneNumber = (phoneNumber, country) => {
    // Throw errors if phoneNumber is invalid
    if (!phoneNumber)
        throw new Error(`Parameter 'phoneNumber' is invalid! The received value was: ${phoneNumber}. Please ensure you provide a valid phone number.`);
    // Clean the phoneNumber by removing non-numeric characters
    phoneNumber = phoneNumber.toString();
    phoneNumber = cleanPhoneNumber(phoneNumber);
    const countryData = detectCountryAndDialCodeFromPhone(phoneNumber);
    const formatterMap = PHONE_FORMATTER_MAPPER;
    // Detect or validate the country code
    const countryCode = (country && country in formatterMap ? country : countryData.countryCode);
    const dialCode = countryData.dialCode;
    // Format the phone number using the detected/validated country code
    const formattedPhoneNumber = formatPhoneNumber$1(phoneNumber, countryCode);
    // Fetch the pattern associated with the countryCode from the PHONE_FORMATTER_MAPPER
    const pattern = formatterMap[countryCode];
    if (!pattern)
        return {
            countryCode,
            dialCode,
            formattedPhoneNumber: phoneNumber,
            formatTemplate: '',
            phoneNumber,
        };
    // Count the number of 'x' characters in the format pattern
    let charCountInFormatterPattern = 0;
    for (let i = 0; i < pattern.length; i++) {
        if (pattern[i] === 'x') {
            charCountInFormatterPattern++;
        }
    }
    // Calculate the difference between phoneNumber length and 'x' characters count in pattern
    const diff = phoneNumber.length - charCountInFormatterPattern;
    // Obtain the format template associated with the countryCode
    const formatTemplate = formatterMap[countryCode];
    // Return the parsed phone number information
    return {
        phoneNumber: phoneNumber.slice(diff),
        countryCode,
        dialCode,
        formattedPhoneNumber: pattern ? formattedPhoneNumber : phoneNumber,
        formatTemplate: formatTemplate || '',
    };
};
var parsePhoneNumber$1 = withErrorBoundary(parsePhoneNumber);

/**
 * Retrieves a mapping of country codes to their respective international dial codes.
 * @returns {Object} An object where each key is a country code (e.g., 'US', 'CA') and its value is the corresponding dial code (e.g., '+1' for 'US' and 'CA').
 */
const getDialCodes = () => {
    const countryDialCode = {};
    for (const [dialCode, countryCodes] of Object.entries(DIAL_CODE_MAPPER.dial_code_to_country)) {
        countryCodes.forEach((countryCode) => {
            countryDialCode[countryCode] = `+${Number(dialCode)}`;
        });
    }
    return countryDialCode;
};
var getDialCodes$1 = withErrorBoundary(getDialCodes);

/**
 * Retrieves the dial code for a specified country code.
 *
 * @param countryCode The country code for which the dial code is to be retrieved.
 *                    It must be a key of the object returned by the `getDialCodes` function.
 * @returns The corresponding dial code as a string.
 * @throws An error if the provided country code is not found in the dial code mapping.
 */
const getDialCodeByCountryCode = (countryCode) => {
    // Get the mapping of all country codes to their respective dial codes
    const dialCodeForAllCountries = getDialCodes$1();
    /** Check if the provided country code exists in the mapping.
     * Return the corresponding dial code if the country code is valid.
     * Throw an error if the country code is not found in the mapping
     * */
    if (countryCode in dialCodeForAllCountries)
        return dialCodeForAllCountries[countryCode];
    else
        throw new Error(`The provided country code is invalid. The received value was: ${countryCode}. Please ensure you pass a valid country code. Check valid country codes here: https://github.com/razorpay/i18nify/blob/master/i18nify-data/country/metadata/data.json`);
};
var getDialCodeByCountryCode$1 = withErrorBoundary(getDialCodeByCountryCode);

var MaskingStyle;
(function (MaskingStyle) {
    MaskingStyle["Full"] = "full";
    MaskingStyle["Prefix"] = "prefix";
    MaskingStyle["Suffix"] = "suffix";
    MaskingStyle["Alternate"] = "alternate";
})(MaskingStyle || (MaskingStyle = {}));

/**
 * Generates a masked phone number based on provided options.
 * This function handles the complexity of different phone number formats and
 * masking preferences such as complete masking or partial masking of digits.
 *
 * @param {GetMaskedPhoneNumberOptions} options - Options for generating the masked phone number.
 * @param {CountryCodeType} options.countryCode - The country code associated with the phone number.
 * @param {boolean} options.withDialCode - Determines if the dial code should be included in the masked number.
 * @param {string} options.phoneNumber - The actual phone number to mask.
 * @param {MaskingOptions} options.maskingOptions - Options to specify how the masking should be performed.
 * @returns {string} The masked phone number formatted as per the specified options.
 * @throws {Error} Throws an error if both countryCode and phoneNumber are empty or if other input validations fail.
 */
const getMaskedPhoneNumber = ({ countryCode, withDialCode = true, phoneNumber, maskingOptions = {}, }) => {
    const { maskingStyle = MaskingStyle.Full, maskedDigitsCount = 0, maskingChar = 'x', } = maskingOptions;
    if (!countryCode && !phoneNumber) {
        throw new Error(`Either 'countryCode' or 'phoneNumber' is mandatory. Please provide a valid 'countryCode' or 'phoneNumber'. Check valid country codes here: https://github.com/razorpay/i18nify/blob/master/i18nify-data/country/metadata/data.json`);
    }
    let maskedContactNumber;
    let dialCode;
    if (phoneNumber) {
        // Clean the phone number to remove any non-numeric characters, except the leading '+'
        let updatedPhoneNumber = phoneNumber;
        updatedPhoneNumber = updatedPhoneNumber.toString();
        updatedPhoneNumber = cleanPhoneNumber(updatedPhoneNumber);
        // Detect the country code and dial code from the cleaned phone number
        const countryData = detectCountryAndDialCodeFromPhone(updatedPhoneNumber);
        const updatedCountryCode = countryCode || countryData.countryCode;
        try {
            dialCode = getDialCodeByCountryCode$1(updatedCountryCode);
        }
        catch (error) {
            dialCode = countryData.dialCode;
        }
        // Extract the phone number without dial code
        const phoneNumberWithoutDialCode = updatedPhoneNumber[0] === '+'
            ? updatedPhoneNumber.slice(dialCode.toString().length)
            : updatedPhoneNumber;
        // Get the phone number formatting template based on the country code
        const formattingTemplate = PHONE_FORMATTER_MAPPER[updatedCountryCode] ||
            phoneNumber.replace(/\d/g, 'x');
        switch (maskingStyle) {
            case MaskingStyle.Alternate:
                // Example: 7394926646 --> 7x9x9x6x4x
                maskedContactNumber = alternateMasking(phoneNumberWithoutDialCode);
                break;
            case MaskingStyle.Prefix:
                // Example: 7394926646 --> xxxx 926646
                maskedContactNumber = prefixMasking(formattingTemplate, String(phoneNumberWithoutDialCode), phoneNumberWithoutDialCode.length - maskedDigitsCount);
                break;
            case MaskingStyle.Suffix:
                // Example: 7394926646 --> 7494 92xxxx
                maskedContactNumber = suffixMasking(formattingTemplate, String(phoneNumberWithoutDialCode), phoneNumberWithoutDialCode.length - maskedDigitsCount);
                break;
            default: // Full Masking Condition
                maskedContactNumber = formattingTemplate;
        }
    }
    else {
        // Retrieve the phone number formatting template using the country code
        maskedContactNumber = PHONE_FORMATTER_MAPPER[countryCode];
        if (!maskedContactNumber) {
            throw new Error(`Parameter 'countryCode' is invalid. The received value was: ${countryCode}. Check valid country codes here: https://github.com/razorpay/i18nify/blob/master/i18nify-data/country/metadata/data.json`);
        }
        dialCode = getDialCodeByCountryCode$1(countryCode);
    }
    // Include the dial code in the masked phone number if requested
    if (withDialCode) {
        return `${dialCode} ${maskedContactNumber.replace(/x/g, maskingChar)}`.trim();
    }
    else {
        return maskedContactNumber.trim().replace(/x/g, maskingChar);
    }
};
var getMaskedPhoneNumber$1 = withErrorBoundary(getMaskedPhoneNumber);

export { MaskingStyle, formatPhoneNumber$1 as formatPhoneNumber, getDialCodeByCountryCode$1 as getDialCodeByCountryCode, getDialCodes$1 as getDialCodes, getMaskedPhoneNumber$1 as getMaskedPhoneNumber, isValidPhoneNumber$1 as isValidPhoneNumber, parsePhoneNumber$1 as parsePhoneNumber };
//# sourceMappingURL=index.js.map
